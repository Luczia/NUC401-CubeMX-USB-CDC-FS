
NUC401-CubeMX-USB-CDC-FS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb8  08006fb8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200001e4  080071a4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  080071a4  00020c38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cac  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fd9  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00038bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bd6  00000000  00000000  00039788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000deba  00000000  00000000  0005235e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000887ab  00000000  00000000  00060218  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e89c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000e8a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001e4 	.word	0x200001e4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006f28 	.word	0x08006f28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001e8 	.word	0x200001e8
 80001d0:	08006f28 	.word	0x08006f28

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b08f      	sub	sp, #60	; 0x3c
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 faab 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f85d 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8f3 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f8c7 	bl	8000678 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004ea:	f005 fee1 	bl	80062b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[]="Hello World!\n";
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <main+0xbc>)
 80004f0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80004f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f6:	c407      	stmia	r4!, {r0, r1, r2}
 80004f8:	8023      	strh	r3, [r4, #0]
  uint8_t USBReceiveBuffer[8];
  uint32_t USBReceiveBufferLength = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  uint8_t status;

  uint8_t log_buffer[21];
  log_buffer[0]='1';
 80004fe:	2331      	movs	r3, #49	; 0x31
 8000500:	703b      	strb	r3, [r7, #0]
  uint16_t time = (uint16_t)(HAL_GetTick()/10);
 8000502:	f000 fafd 	bl	8000b00 <HAL_GetTick>
 8000506:	4602      	mov	r2, r0
 8000508:	4b22      	ldr	r3, [pc, #136]	; (8000594 <main+0xc0>)
 800050a:	fba3 2302 	umull	r2, r3, r3, r2
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	86bb      	strh	r3, [r7, #52]	; 0x34
  log_buffer[1]= time & 0xff;
 8000512:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000514:	b2db      	uxtb	r3, r3
 8000516:	707b      	strb	r3, [r7, #1]
  log_buffer[2]= (time >> 8) & 0xff;
 8000518:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800051a:	0a1b      	lsrs	r3, r3, #8
 800051c:	b29b      	uxth	r3, r3
 800051e:	b2db      	uxtb	r3, r3
 8000520:	70bb      	strb	r3, [r7, #2]
  while (1)
  {
//	  if(HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100) != HAL_OK)
//	 			  Error_Handler();

	 	  if (VCP_retrieveUSBData(USBReceiveBuffer,&USBReceiveBufferLength)!=0)
 8000522:	f107 0218 	add.w	r2, r7, #24
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f005 ffbf 	bl	80064b0 <VCP_retrieveUSBData>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00e      	beq.n	8000556 <main+0x82>
	 	  {
	 		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000538:	2120      	movs	r1, #32
 800053a:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0xc4>)
 800053c:	f000 fdbb 	bl	80010b6 <HAL_GPIO_TogglePin>
	 		  status = interpretHostComand(USBReceiveBuffer,&USBReceiveBufferLength);
 8000540:	f107 0218 	add.w	r2, r7, #24
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fa2a 	bl	80009a4 <interpretHostComand>
 8000550:	4603      	mov	r3, r0
 8000552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	 		  //CDC_Transmit_FS(USBReceiveBuffer, sizeof(USBReceiveBuffer));
	 	  }

	 	 if(status==LOG_DATA){
 8000556:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800055a:	2b31      	cmp	r3, #49	; 0x31
 800055c:	d113      	bne.n	8000586 <main+0xb2>
	 		uint16_t time = (uint16_t)(HAL_GetTick()/10);
 800055e:	f000 facf 	bl	8000b00 <HAL_GetTick>
 8000562:	4602      	mov	r2, r0
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <main+0xc0>)
 8000566:	fba3 2302 	umull	r2, r3, r3, r2
 800056a:	08db      	lsrs	r3, r3, #3
 800056c:	867b      	strh	r3, [r7, #50]	; 0x32
	 		log_buffer[1]= time & 0xff;
 800056e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	707b      	strb	r3, [r7, #1]
	 		log_buffer[2]= (time >> 8) & 0xff;
 8000574:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	b29b      	uxth	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	70bb      	strb	r3, [r7, #2]
	 		sendLogData(log_buffer);
 800057e:	463b      	mov	r3, r7
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fa20 	bl	80009c6 <sendLogData>
	 	 }

	 	  HAL_Delay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058a:	f000 fac5 	bl	8000b18 <HAL_Delay>
	 	  if (VCP_retrieveUSBData(USBReceiveBuffer,&USBReceiveBufferLength)!=0)
 800058e:	e7c8      	b.n	8000522 <main+0x4e>
 8000590:	08006f40 	.word	0x08006f40
 8000594:	cccccccd 	.word	0xcccccccd
 8000598:	40020000 	.word	0x40020000

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f006 fbf9 	bl	8006da2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a29      	ldr	r2, [pc, #164]	; (8000670 <SystemClock_Config+0xd4>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <SystemClock_Config+0xd8>)
 80005ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005fc:	2303      	movs	r3, #3
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000600:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	2310      	movs	r3, #16
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800061c:	2348      	movs	r3, #72	; 0x48
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000620:	2304      	movs	r3, #4
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000624:	2303      	movs	r3, #3
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fee1 	bl	80023f4 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000638:	f000 f8b8 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 f93b 	bl	80028d4 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000664:	f000 f8a2 	bl	80007ac <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f002 fb02 	bl	8002cb8 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f877 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000318 	.word	0x20000318
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	; (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000758:	f000 fc94 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_GPIO_Init+0xdc>)
 8000772:	f000 fb05 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xd4>)
 800078e:	f000 faf7 	bl	8000d80 <HAL_GPIO_Init>

}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	10210000 	.word	0x10210000
 80007a8:	40020800 	.word	0x40020800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <HAL_MspInit+0x4c>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x4c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f000 fa7e 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <HAL_UART_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12b      	bne.n	8000886 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_UART_MspInit+0x88>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_UART_MspInit+0x88>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000866:	230c      	movs	r3, #12
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000876:	2307      	movs	r3, #7
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000882:	f000 fa7d 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f8f2 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <OTG_FS_IRQHandler+0x10>)
 80008fe:	f000 fd45 	bl	800138c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000082c 	.word	0x2000082c

0800090c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <_sbrk+0x5c>)
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <_sbrk+0x60>)
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <_sbrk+0x64>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <_sbrk+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	429a      	cmp	r2, r3
 800093a:	d207      	bcs.n	800094c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800093c:	f006 f9ec 	bl	8006d18 <__errno>
 8000940:	4602      	mov	r2, r0
 8000942:	230c      	movs	r3, #12
 8000944:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e009      	b.n	8000960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <_sbrk+0x64>)
 800095c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20018000 	.word	0x20018000
 800096c:	00000400 	.word	0x00000400
 8000970:	20000200 	.word	0x20000200
 8000974:	20000c38 	.word	0x20000c38

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <SystemInit+0x28>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <SystemInit+0x28>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SystemInit+0x28>)
 800098e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000992:	609a      	str	r2, [r3, #8]
#endif
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <interpretHostComand>:

#include "usb_comm.h"


uint8_t interpretHostComand(uint8_t* Buf, uint32_t *Len)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
	switch(Buf[0]){
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b31      	cmp	r3, #49	; 0x31
 80009b4:	d101      	bne.n	80009ba <interpretHostComand+0x16>
	case LOG_DATA : {
				return LOG_DATA ;
 80009b6:	2331      	movs	r3, #49	; 0x31
 80009b8:	e7ff      	b.n	80009ba <interpretHostComand+0x16>
		}
	}
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <sendLogData>:

uint8_t sendLogData(uint8_t* dataBuf)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(dataBuf, sizeof(dataBuf));
 80009ce:	2104      	movs	r1, #4
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f005 fd35 	bl	8006440 <CDC_Transmit_FS>
	return USB_COM_OK;
 80009d6:	2373      	movs	r3, #115	; 0x73
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009e6:	e003      	b.n	80009f0 <LoopCopyDataInit>

080009e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009ee:	3104      	adds	r1, #4

080009f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009f8:	d3f6      	bcc.n	80009e8 <CopyDataInit>
  ldr  r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009fc:	e002      	b.n	8000a04 <LoopFillZerobss>

080009fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a00:	f842 3b04 	str.w	r3, [r2], #4

08000a04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a08:	d3f9      	bcc.n	80009fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffb5 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f006 f989 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fd5f 	bl	80004d4 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000a1c:	08006fc0 	.word	0x08006fc0
  ldr  r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a24:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000a28:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000a2c:	20000c38 	.word	0x20000c38

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f94d 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fea8 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f965 	bl	8000d66 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f92d 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000358 	.word	0x20000358

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000358 	.word	0x20000358

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_Delay+0x40>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e159      	b.n	8001050 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 8148 	bne.w	800104a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d00b      	beq.n	8000dda <HAL_GPIO_Init+0x5a>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d007      	beq.n	8000dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dce:	2b11      	cmp	r3, #17
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0xfc>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b12      	cmp	r3, #18
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a2 	beq.w	800104a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b56      	ldr	r3, [pc, #344]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a55      	ldr	r2, [pc, #340]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <HAL_GPIO_Init+0x2e4>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a51      	ldr	r2, [pc, #324]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a48      	ldr	r2, [pc, #288]	; (800106c <HAL_GPIO_Init+0x2ec>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d019      	beq.n	8000f82 <HAL_GPIO_Init+0x202>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a47      	ldr	r2, [pc, #284]	; (8001070 <HAL_GPIO_Init+0x2f0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0x1fe>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a46      	ldr	r2, [pc, #280]	; (8001074 <HAL_GPIO_Init+0x2f4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00d      	beq.n	8000f7a <HAL_GPIO_Init+0x1fa>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a45      	ldr	r2, [pc, #276]	; (8001078 <HAL_GPIO_Init+0x2f8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x1f6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a44      	ldr	r2, [pc, #272]	; (800107c <HAL_GPIO_Init+0x2fc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_GPIO_Init+0x1f2>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f72:	2307      	movs	r3, #7
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x204>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x2e8>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc6:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_GPIO_Init+0x300>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_GPIO_Init+0x300>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_GPIO_Init+0x300>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_GPIO_Init+0x300>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f aea2 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	3724      	adds	r7, #36	; 0x24
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800
 8001068:	40013800 	.word	0x40013800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40013c00 	.word	0x40013c00

08001084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001094:	787b      	ldrb	r3, [r7, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a0:	e003      	b.n	80010aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	619a      	str	r2, [r3, #24]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	401a      	ands	r2, r3
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d104      	bne.n	80010da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	041a      	lsls	r2, r3, #16
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b08f      	sub	sp, #60	; 0x3c
 80010f0:	af0a      	add	r7, sp, #40	; 0x28
 80010f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e10f      	b.n	800131e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d106      	bne.n	800111e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f005 fb01 	bl	8006720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fa9a 	bl	8003676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	687e      	ldr	r6, [r7, #4]
 800114a:	466d      	mov	r5, sp
 800114c:	f106 0410 	add.w	r4, r6, #16
 8001150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	e894 0003 	ldmia.w	r4, {r0, r1}
 800115c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001160:	1d33      	adds	r3, r6, #4
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f002 f971 	bl	800344c <USB_CoreInit>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0d0      	b.n	800131e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fa88 	bl	8003698 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e04a      	b.n	8001224 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	333d      	adds	r3, #61	; 0x3d
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	333c      	adds	r3, #60	; 0x3c
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	b298      	uxth	r0, r3
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	3342      	adds	r3, #66	; 0x42
 80011ca:	4602      	mov	r2, r0
 80011cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	1a9b      	subs	r3, r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	333f      	adds	r3, #63	; 0x3f
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	3344      	adds	r3, #68	; 0x44
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	1a9b      	subs	r3, r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3348      	adds	r3, #72	; 0x48
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	3350      	adds	r3, #80	; 0x50
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	3301      	adds	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3af      	bcc.n	800118e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e044      	b.n	80012be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3301      	adds	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d3b5      	bcc.n	8001234 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	687e      	ldr	r6, [r7, #4]
 80012d0:	466d      	mov	r5, sp
 80012d2:	f106 0410 	add.w	r4, r6, #16
 80012d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80012e6:	1d33      	adds	r3, r6, #4
 80012e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ea:	6838      	ldr	r0, [r7, #0]
 80012ec:	f002 f9fe 	bl	80036ec <USB_DevInit>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2202      	movs	r2, #2
 80012fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00d      	b.n	800131e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fa46 	bl	80047a8 <USB_DevDisconnect>

  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001326 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_PCD_Start+0x1c>
 800133e:	2302      	movs	r3, #2
 8001340:	e020      	b.n	8001384 <HAL_PCD_Start+0x5e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	2b01      	cmp	r3, #1
 8001350:	d109      	bne.n	8001366 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 f972 	bl	8003654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f9f6 	bl	8004766 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b08d      	sub	sp, #52	; 0x34
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f003 fab4 	bl	8004910 <USB_GetMode>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f040 839d 	bne.w	8001aea <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fa18 	bl	80047ea <USB_ReadInterrupts>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 8393 	beq.w	8001ae8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fa0f 	bl	80047ea <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d107      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f002 0202 	and.w	r2, r2, #2
 80013e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 f9fd 	bl	80047ea <USB_ReadInterrupts>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d161      	bne.n	80014be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0210 	bic.w	r2, r2, #16
 8001408:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f003 020f 	and.w	r2, r3, #15
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	3304      	adds	r3, #4
 8001428:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	0c5b      	lsrs	r3, r3, #17
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	2b02      	cmp	r3, #2
 8001434:	d124      	bne.n	8001480 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d035      	beq.n	80014ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800144c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001450:	b29b      	uxth	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	6a38      	ldr	r0, [r7, #32]
 8001456:	f003 f863 	bl	8004520 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001466:	441a      	add	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001478:	441a      	add	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	619a      	str	r2, [r3, #24]
 800147e:	e016      	b.n	80014ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	0c5b      	lsrs	r3, r3, #17
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	2b06      	cmp	r3, #6
 800148a:	d110      	bne.n	80014ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001492:	2208      	movs	r2, #8
 8001494:	4619      	mov	r1, r3
 8001496:	6a38      	ldr	r0, [r7, #32]
 8001498:	f003 f842 	bl	8004520 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	699a      	ldr	r2, [r3, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014a8:	441a      	add	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	699a      	ldr	r2, [r3, #24]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0210 	orr.w	r2, r2, #16
 80014bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 f991 	bl	80047ea <USB_ReadInterrupts>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014d2:	d16e      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 f997 	bl	8004810 <USB_ReadDevAllOutEpInterrupt>
 80014e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014e4:	e062      	b.n	80015ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d057      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 f9bc 	bl	8004878 <USB_ReadDevOutEPInterrupt>
 8001500:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00c      	beq.n	8001526 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001518:	461a      	mov	r2, r3
 800151a:	2301      	movs	r3, #1
 800151c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800151e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fdb1 	bl	8002088 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00c      	beq.n	800154a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153c:	461a      	mov	r2, r3
 800153e:	2308      	movs	r3, #8
 8001540:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 feab 	bl	80022a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	015a      	lsls	r2, r3, #5
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001560:	461a      	mov	r2, r3
 8001562:	2310      	movs	r3, #16
 8001564:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	015a      	lsls	r2, r3, #5
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4413      	add	r3, r2
 8001578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800157c:	461a      	mov	r2, r3
 800157e:	2320      	movs	r3, #32
 8001580:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001598:	461a      	mov	r2, r3
 800159a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3301      	adds	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d199      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 f917 	bl	80047ea <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015c6:	f040 80c0 	bne.w	800174a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f938 	bl	8004844 <USB_ReadDevAllInEpInterrupt>
 80015d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80015da:	e0b2      	b.n	8001742 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a7 	beq.w	8001736 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f95e 	bl	80048b4 <USB_ReadDevInEPInterrupt>
 80015f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d057      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	2201      	movs	r2, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43db      	mvns	r3, r3
 800161e:	69f9      	ldr	r1, [r7, #28]
 8001620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001624:	4013      	ands	r3, r2
 8001626:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001634:	461a      	mov	r2, r3
 8001636:	2301      	movs	r3, #1
 8001638:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d132      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	4613      	mov	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	1a9b      	subs	r3, r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3348      	adds	r3, #72	; 0x48
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4403      	add	r3, r0
 8001662:	3344      	adds	r3, #68	; 0x44
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4419      	add	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166c:	4613      	mov	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4403      	add	r3, r0
 8001676:	3348      	adds	r3, #72	; 0x48
 8001678:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	2b00      	cmp	r3, #0
 800167e:	d113      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x31c>
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3350      	adds	r3, #80	; 0x50
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016a0:	461a      	mov	r2, r3
 80016a2:	2101      	movs	r1, #1
 80016a4:	f003 f966 	bl	8004974 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f005 f8b7 	bl	8006822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ca:	461a      	mov	r2, r3
 80016cc:	2308      	movs	r3, #8
 80016ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e6:	461a      	mov	r2, r3
 80016e8:	2310      	movs	r3, #16
 80016ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001702:	461a      	mov	r2, r3
 8001704:	2340      	movs	r3, #64	; 0x40
 8001706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171e:	461a      	mov	r2, r3
 8001720:	2302      	movs	r3, #2
 8001722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800172e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fc1b 	bl	8001f6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	f47f af49 	bne.w	80015dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f84b 	bl	80047ea <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800175a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800175e:	d122      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001786:	2100      	movs	r1, #0
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fe27 	bl	80023dc <HAL_PCDEx_LPM_Callback>
 800178e:	e002      	b.n	8001796 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f005 f8bd 	bl	8006910 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 f81d 	bl	80047ea <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017ba:	d112      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d102      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f005 f879 	bl	80068c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 ffff 	bl	80047ea <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f6:	f040 80c7 	bne.w	8001988 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2110      	movs	r1, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f002 f8cd 	bl	80039b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181e:	e056      	b.n	80018ce <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800182c:	461a      	mov	r2, r3
 800182e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001832:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001844:	0151      	lsls	r1, r2, #5
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	440a      	add	r2, r1
 800184a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800184e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001852:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	015a      	lsls	r2, r3, #5
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4413      	add	r3, r2
 800185c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001864:	0151      	lsls	r1, r2, #5
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	440a      	add	r2, r1
 800186a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800186e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001872:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001880:	461a      	mov	r2, r3
 8001882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001886:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001898:	0151      	lsls	r1, r2, #5
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	440a      	add	r2, r1
 800189e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b8:	0151      	lsls	r1, r2, #5
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	440a      	add	r2, r1
 80018be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ca:	3301      	adds	r3, #1
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d3a3      	bcc.n	8001820 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d016      	beq.n	8001922 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001904:	f043 030b 	orr.w	r3, r3, #11
 8001908:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191a:	f043 030b 	orr.w	r3, r3, #11
 800191e:	6453      	str	r3, [r2, #68]	; 0x44
 8001920:	e015      	b.n	800194e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001930:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001934:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001938:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001948:	f043 030b 	orr.w	r3, r3, #11
 800194c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001960:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001972:	461a      	mov	r2, r3
 8001974:	f002 fffe 	bl	8004974 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 ff2c 	bl	80047ea <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800199c:	d124      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ffc2 	bl	800492c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 f862 	bl	8003a76 <USB_GetDevSpeed>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	f001 f947 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 80019c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	4620      	mov	r0, r4
 80019ce:	f001 fd9f 	bl	8003510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f004 ff4d 	bl	8006872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fefc 	bl	80047ea <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d10a      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f004 ff2a 	bl	8006856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f002 0208 	and.w	r2, r2, #8
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fee7 	bl	80047ea <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a26:	d10f      	bne.n	8001a48 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f004 ff8c 	bl	8006950 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fecc 	bl	80047ea <USB_ReadInterrupts>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a5c:	d10f      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f004 ff5f 	bl	800692c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 feb1 	bl	80047ea <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a92:	d10a      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 ff6d 	bl	8006974 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fe9b 	bl	80047ea <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d115      	bne.n	8001aea <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f004 ff5d 	bl	8006990 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	e000      	b.n	8001aea <HAL_PCD_IRQHandler+0x75e>
      return;
 8001ae8:	bf00      	nop
    }
  }
}
 8001aea:	3734      	adds	r7, #52	; 0x34
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd90      	pop	{r4, r7, pc}

08001af0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_PCD_SetAddress+0x1a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e013      	b.n	8001b32 <HAL_PCD_SetAddress+0x42>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 fdf9 	bl	800471a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	4608      	mov	r0, r1
 8001b44:	4611      	mov	r1, r2
 8001b46:	461a      	mov	r2, r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	70fb      	strb	r3, [r7, #3]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	803b      	strh	r3, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da0f      	bge.n	8001b80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	3338      	adds	r3, #56	; 0x38
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	3304      	adds	r3, #4
 8001b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
 8001b7e:	e00f      	b.n	8001ba0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	3304      	adds	r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bac:	883a      	ldrh	r2, [r7, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	78ba      	ldrb	r2, [r7, #2]
 8001bb6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bca:	78bb      	ldrb	r3, [r7, #2]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_PCD_EP_Open+0xaa>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e00e      	b.n	8001c02 <HAL_PCD_EP_Open+0xc8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 ff64 	bl	8003ac0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001c00:	7afb      	ldrb	r3, [r7, #11]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da0f      	bge.n	8001c3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	3338      	adds	r3, #56	; 0x38
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	3304      	adds	r3, #4
 8001c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	705a      	strb	r2, [r3, #1]
 8001c3c:	e00f      	b.n	8001c5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	3304      	adds	r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_PCD_EP_Close+0x6e>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e00e      	b.n	8001c96 <HAL_PCD_EP_Close+0x8c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 ffa2 	bl	8003bd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	460b      	mov	r3, r1
 8001cac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	f003 020f 	and.w	r2, r3, #15
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d102      	bne.n	8001cfa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	6979      	ldr	r1, [r7, #20]
 8001d12:	f002 fa7d 	bl	8004210 <USB_EP0StartXfer>
 8001d16:	e008      	b.n	8001d2a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	f002 f82f 	bl	8003d88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	460b      	mov	r3, r1
 8001d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	7afb      	ldrb	r3, [r7, #11]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3338      	adds	r3, #56	; 0x38
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	3304      	adds	r3, #4
 8001d8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2201      	movs	r2, #1
 8001da2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6979      	ldr	r1, [r7, #20]
 8001dd6:	f002 fa1b 	bl	8004210 <USB_EP0StartXfer>
 8001dda:	e008      	b.n	8001dee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	f001 ffcd 	bl	8003d88 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	f003 020f 	and.w	r2, r3, #15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d901      	bls.n	8001e16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e050      	b.n	8001eb8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da0f      	bge.n	8001e3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3338      	adds	r3, #56	; 0x38
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
 8001e3c:	e00d      	b.n	8001e5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e3e:	78fa      	ldrb	r2, [r7, #3]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_PCD_EP_SetStall+0x82>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e01e      	b.n	8001eb8 <HAL_PCD_EP_SetStall+0xc0>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68f9      	ldr	r1, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fb72 	bl	8004572 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	b2d9      	uxtb	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	f002 fd63 	bl	8004974 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 020f 	and.w	r2, r3, #15
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d901      	bls.n	8001ede <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e042      	b.n	8001f64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da0f      	bge.n	8001f06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	f003 020f 	and.w	r2, r3, #15
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	3338      	adds	r3, #56	; 0x38
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	3304      	adds	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
 8001f04:	e00f      	b.n	8001f26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_PCD_EP_ClrStall+0x86>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e00e      	b.n	8001f64 <HAL_PCD_EP_ClrStall+0xa4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fb7a 	bl	800464e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	1a9b      	subs	r3, r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	3338      	adds	r3, #56	; 0x38
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	3304      	adds	r3, #4
 8001f92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d901      	bls.n	8001fa4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e06c      	b.n	800207e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d902      	bls.n	8001fc0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3303      	adds	r3, #3
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fc8:	e02b      	b.n	8002022 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d902      	bls.n	8001fe6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4603      	mov	r3, r0
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f002 fa56 	bl	80044b6 <USB_WritePacket>

    ep->xfer_buff  += len;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	441a      	add	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	441a      	add	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	b29b      	uxth	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	429a      	cmp	r2, r3
 8002036:	d809      	bhi.n	800204c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002040:	429a      	cmp	r2, r3
 8002042:	d203      	bcs.n	800204c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1be      	bne.n	8001fca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	429a      	cmp	r2, r3
 8002056:	d811      	bhi.n	800207c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	2201      	movs	r2, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	43db      	mvns	r3, r3
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002078:	4013      	ands	r3, r2
 800207a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	333c      	adds	r3, #60	; 0x3c
 80020a0:	3304      	adds	r3, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	f040 80a0 	bne.w	8002200 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d015      	beq.n	80020f6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a72      	ldr	r2, [pc, #456]	; (8002298 <PCD_EP_OutXfrComplete_int+0x210>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	f240 80dd 	bls.w	800228e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80d7 	beq.w	800228e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ec:	461a      	mov	r2, r3
 80020ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f2:	6093      	str	r3, [r2, #8]
 80020f4:	e0cb      	b.n	800228e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d009      	beq.n	8002114 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210c:	461a      	mov	r2, r3
 800210e:	2320      	movs	r3, #32
 8002110:	6093      	str	r3, [r2, #8]
 8002112:	e0bc      	b.n	800228e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 80b7 	bne.w	800228e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <PCD_EP_OutXfrComplete_int+0x210>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d90f      	bls.n	8002148 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213e:	461a      	mov	r2, r3
 8002140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002144:	6093      	str	r3, [r2, #8]
 8002146:	e0a2      	b.n	800228e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800215a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	0159      	lsls	r1, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	440b      	add	r3, r1
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800216e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4403      	add	r3, r0
 800217e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002182:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4403      	add	r3, r0
 80021a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4419      	add	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4403      	add	r3, r0
 80021bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d114      	bne.n	80021f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021ea:	461a      	mov	r2, r3
 80021ec:	2101      	movs	r1, #1
 80021ee:	f002 fbc1 	bl	8004974 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f004 faf7 	bl	80067ec <HAL_PCD_DataOutStageCallback>
 80021fe:	e046      	b.n	800228e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a26      	ldr	r2, [pc, #152]	; (800229c <PCD_EP_OutXfrComplete_int+0x214>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d124      	bne.n	8002252 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	461a      	mov	r2, r3
 8002220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002224:	6093      	str	r3, [r2, #8]
 8002226:	e032      	b.n	800228e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	461a      	mov	r2, r3
 8002240:	2320      	movs	r3, #32
 8002242:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f004 face 	bl	80067ec <HAL_PCD_DataOutStageCallback>
 8002250:	e01d      	b.n	800228e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d114      	bne.n	8002282 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d108      	bne.n	8002282 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800227a:	461a      	mov	r2, r3
 800227c:	2100      	movs	r1, #0
 800227e:	f002 fb79 	bl	8004974 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	4619      	mov	r1, r3
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f004 faaf 	bl	80067ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	4f54300a 	.word	0x4f54300a
 800229c:	4f54310a 	.word	0x4f54310a

080022a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	333c      	adds	r3, #60	; 0x3c
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <PCD_EP_OutSetupPacket_int+0x88>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d90e      	bls.n	80022f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f004 fa67 	bl	80067c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <PCD_EP_OutSetupPacket_int+0x88>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d90c      	bls.n	800231c <PCD_EP_OutSetupPacket_int+0x7c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002314:	461a      	mov	r2, r3
 8002316:	2101      	movs	r1, #1
 8002318:	f002 fb2c 	bl	8004974 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	4f54300a 	.word	0x4f54300a

0800232c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
 8002338:	4613      	mov	r3, r2
 800233a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800234a:	883b      	ldrh	r3, [r7, #0]
 800234c:	0419      	lsls	r1, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	430a      	orrs	r2, r1
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
 8002358:	e028      	b.n	80023ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e00d      	b.n	800238a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3340      	adds	r3, #64	; 0x40
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	3301      	adds	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b01      	subs	r3, #1
 8002390:	429a      	cmp	r2, r3
 8002392:	d3ec      	bcc.n	800236e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002394:	883b      	ldrh	r3, [r7, #0]
 8002396:	0418      	lsls	r0, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	3b01      	subs	r3, #1
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4302      	orrs	r2, r0
 80023a4:	3340      	adds	r3, #64	; 0x40
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e25b      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	4ba3      	ldr	r3, [pc, #652]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4ba0      	ldr	r3, [pc, #640]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b9d      	ldr	r3, [pc, #628]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b99      	ldr	r3, [pc, #612]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05b      	beq.n	80024fc <HAL_RCC_OscConfig+0x108>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e236      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x74>
 800245a:	4b91      	ldr	r3, [pc, #580]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a90      	ldr	r2, [pc, #576]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a8a      	ldr	r2, [pc, #552]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 800248c:	4b84      	ldr	r3, [pc, #528]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a83      	ldr	r2, [pc, #524]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a80      	ldr	r2, [pc, #512]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fb28 	bl	8000b00 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fb24 	bl	8000b00 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e1fb      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xc0>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fb14 	bl	8000b00 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fb10 	bl	8000b00 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1e7      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0xe8>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b62      	ldr	r3, [pc, #392]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1bb      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b56      	ldr	r3, [pc, #344]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4952      	ldr	r1, [pc, #328]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_OscConfig+0x2b0>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fac9 	bl	8000b00 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe fac5 	bl	8000b00 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e19c      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4940      	ldr	r1, [pc, #256]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0x2b0>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe faa8 	bl	8000b00 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe faa4 	bl	8000b00 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e17b      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d030      	beq.n	8002640 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_RCC_OscConfig+0x2b4>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fa88 	bl	8000b00 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe fa84 	bl	8000b00 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e15b      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x200>
 8002612:	e015      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_OscConfig+0x2b4>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe fa71 	bl	8000b00 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe fa6d 	bl	8000b00 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e144      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80a0 	beq.w	800278e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x2b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d121      	bne.n	80026ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_RCC_OscConfig+0x2b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_RCC_OscConfig+0x2b8>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe fa33 	bl	8000b00 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e011      	b.n	80026c2 <HAL_RCC_OscConfig+0x2ce>
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	42470000 	.word	0x42470000
 80026a8:	42470e80 	.word	0x42470e80
 80026ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7fe fa26 	bl	8000b00 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0fd      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c2:	4b81      	ldr	r3, [pc, #516]	; (80028c8 <HAL_RCC_OscConfig+0x4d4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2f0>
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a7c      	ldr	r2, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	e01c      	b.n	800271e <HAL_RCC_OscConfig+0x32a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d10c      	bne.n	8002706 <HAL_RCC_OscConfig+0x312>
 80026ec:	4b77      	ldr	r3, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f0:	4a76      	ldr	r2, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6713      	str	r3, [r2, #112]	; 0x70
 80026f8:	4b74      	ldr	r3, [pc, #464]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a73      	ldr	r2, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	e00b      	b.n	800271e <HAL_RCC_OscConfig+0x32a>
 8002706:	4b71      	ldr	r3, [pc, #452]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270a:	4a70      	ldr	r2, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6713      	str	r3, [r2, #112]	; 0x70
 8002712:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a6d      	ldr	r2, [pc, #436]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d015      	beq.n	8002752 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002726:	f7fe f9eb 	bl	8000b00 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe f9e7 	bl	8000b00 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0bc      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	4b61      	ldr	r3, [pc, #388]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ee      	beq.n	800272e <HAL_RCC_OscConfig+0x33a>
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe f9d5 	bl	8000b00 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe f9d1 	bl	8000b00 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0a6      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ee      	bne.n	800275a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002782:	4b52      	ldr	r3, [pc, #328]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8092 	beq.w	80028bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002798:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d05c      	beq.n	800285e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d141      	bne.n	8002830 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <HAL_RCC_OscConfig+0x4dc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe f9a5 	bl	8000b00 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe f9a1 	bl	8000b00 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e078      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	019b      	lsls	r3, r3, #6
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	3b01      	subs	r3, #1
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	4933      	ldr	r1, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002802:	4b33      	ldr	r3, [pc, #204]	; (80028d0 <HAL_RCC_OscConfig+0x4dc>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe f97a 	bl	8000b00 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7fe f976 	bl	8000b00 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04d      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x41c>
 800282e:	e045      	b.n	80028bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x4dc>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe f963 	bl	8000b00 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe f95f 	bl	8000b00 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e036      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x44a>
 800285c:	e02e      	b.n	80028bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e029      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_RCC_OscConfig+0x4d8>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	429a      	cmp	r2, r3
 800287c:	d11c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d115      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002898:	4293      	cmp	r3, r2
 800289a:	d10d      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40007000 	.word	0x40007000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470060 	.word	0x42470060

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe f89c 	bl	8000b00 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe f898 	bl	8000b00 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fffc 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08006f98 	.word	0x08006f98
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	20000004 	.word	0x20000004

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d007      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d008      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80b4 	bne.w	8002c34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ace:	60bb      	str	r3, [r7, #8]
       break;
 8002ad0:	e0b3      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad2:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ad4:	60bb      	str	r3, [r7, #8]
      break;
 8002ad6:	e0b0      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad8:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae2:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04a      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aee:	4b55      	ldr	r3, [pc, #340]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	f04f 0400 	mov.w	r4, #0
 8002af8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	ea03 0501 	and.w	r5, r3, r1
 8002b04:	ea04 0602 	and.w	r6, r4, r2
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4632      	mov	r2, r6
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	f04f 0400 	mov.w	r4, #0
 8002b14:	0154      	lsls	r4, r2, #5
 8002b16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b1a:	014b      	lsls	r3, r1, #5
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4622      	mov	r2, r4
 8002b20:	1b49      	subs	r1, r1, r5
 8002b22:	eb62 0206 	sbc.w	r2, r2, r6
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	0194      	lsls	r4, r2, #6
 8002b30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b34:	018b      	lsls	r3, r1, #6
 8002b36:	1a5b      	subs	r3, r3, r1
 8002b38:	eb64 0402 	sbc.w	r4, r4, r2
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	00e2      	lsls	r2, r4, #3
 8002b46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b4a:	00d9      	lsls	r1, r3, #3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	195b      	adds	r3, r3, r5
 8002b52:	eb44 0406 	adc.w	r4, r4, r6
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	0262      	lsls	r2, r4, #9
 8002b60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b64:	0259      	lsls	r1, r3, #9
 8002b66:	460b      	mov	r3, r1
 8002b68:	4614      	mov	r4, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f04f 0400 	mov.w	r4, #0
 8002b74:	461a      	mov	r2, r3
 8002b76:	4623      	mov	r3, r4
 8002b78:	f7fd fb2c 	bl	80001d4 <__aeabi_uldivmod>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e049      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b84:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	f04f 0400 	mov.w	r4, #0
 8002b8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	ea03 0501 	and.w	r5, r3, r1
 8002b9a:	ea04 0602 	and.w	r6, r4, r2
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	0154      	lsls	r4, r2, #5
 8002bac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bb0:	014b      	lsls	r3, r1, #5
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	1b49      	subs	r1, r1, r5
 8002bb8:	eb62 0206 	sbc.w	r2, r2, r6
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	f04f 0400 	mov.w	r4, #0
 8002bc4:	0194      	lsls	r4, r2, #6
 8002bc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	1a5b      	subs	r3, r3, r1
 8002bce:	eb64 0402 	sbc.w	r4, r4, r2
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	00e2      	lsls	r2, r4, #3
 8002bdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002be0:	00d9      	lsls	r1, r3, #3
 8002be2:	460b      	mov	r3, r1
 8002be4:	4614      	mov	r4, r2
 8002be6:	195b      	adds	r3, r3, r5
 8002be8:	eb44 0406 	adc.w	r4, r4, r6
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	02a2      	lsls	r2, r4, #10
 8002bf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bfa:	0299      	lsls	r1, r3, #10
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	4621      	mov	r1, r4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	f7fd fae1 	bl	80001d4 <__aeabi_uldivmod>
 8002c12:	4603      	mov	r3, r0
 8002c14:	460c      	mov	r4, r1
 8002c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	60bb      	str	r3, [r7, #8]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c36:	60bb      	str	r3, [r7, #8]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c44:	40023800 	.word	0x40023800
 8002c48:	00f42400 	.word	0x00f42400
 8002c4c:	007a1200 	.word	0x007a1200

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000000 	.word	0x20000000

08002c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c6c:	f7ff fff0 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c70:	4601      	mov	r1, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0a9b      	lsrs	r3, r3, #10
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7e:	5cd3      	ldrb	r3, [r2, r3]
 8002c80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08006fa8 	.word	0x08006fa8

08002c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c94:	f7ff ffdc 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c98:	4601      	mov	r1, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0b5b      	lsrs	r3, r3, #13
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4a03      	ldr	r2, [pc, #12]	; (8002cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08006fa8 	.word	0x08006fa8

08002cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e03f      	b.n	8002d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd fd94 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2224      	movs	r2, #36	; 0x24
 8002ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f829 	bl	8002d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d96:	f023 030c 	bic.w	r3, r3, #12
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc2:	f040 818b 	bne.w	80030dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4ac1      	ldr	r2, [pc, #772]	; (80030d0 <UART_SetConfig+0x37c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d005      	beq.n	8002ddc <UART_SetConfig+0x88>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4abf      	ldr	r2, [pc, #764]	; (80030d4 <UART_SetConfig+0x380>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	f040 80bd 	bne.w	8002f56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ddc:	f7ff ff58 	bl	8002c90 <HAL_RCC_GetPCLK2Freq>
 8002de0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	461d      	mov	r5, r3
 8002de6:	f04f 0600 	mov.w	r6, #0
 8002dea:	46a8      	mov	r8, r5
 8002dec:	46b1      	mov	r9, r6
 8002dee:	eb18 0308 	adds.w	r3, r8, r8
 8002df2:	eb49 0409 	adc.w	r4, r9, r9
 8002df6:	4698      	mov	r8, r3
 8002df8:	46a1      	mov	r9, r4
 8002dfa:	eb18 0805 	adds.w	r8, r8, r5
 8002dfe:	eb49 0906 	adc.w	r9, r9, r6
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e16:	4688      	mov	r8, r1
 8002e18:	4691      	mov	r9, r2
 8002e1a:	eb18 0005 	adds.w	r0, r8, r5
 8002e1e:	eb49 0106 	adc.w	r1, r9, r6
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0600 	mov.w	r6, #0
 8002e2c:	196b      	adds	r3, r5, r5
 8002e2e:	eb46 0406 	adc.w	r4, r6, r6
 8002e32:	461a      	mov	r2, r3
 8002e34:	4623      	mov	r3, r4
 8002e36:	f7fd f9cd 	bl	80001d4 <__aeabi_uldivmod>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4ba5      	ldr	r3, [pc, #660]	; (80030d8 <UART_SetConfig+0x384>)
 8002e42:	fba3 2302 	umull	r2, r3, r3, r2
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	461d      	mov	r5, r3
 8002e50:	f04f 0600 	mov.w	r6, #0
 8002e54:	46a9      	mov	r9, r5
 8002e56:	46b2      	mov	sl, r6
 8002e58:	eb19 0309 	adds.w	r3, r9, r9
 8002e5c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e60:	4699      	mov	r9, r3
 8002e62:	46a2      	mov	sl, r4
 8002e64:	eb19 0905 	adds.w	r9, r9, r5
 8002e68:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e80:	4689      	mov	r9, r1
 8002e82:	4692      	mov	sl, r2
 8002e84:	eb19 0005 	adds.w	r0, r9, r5
 8002e88:	eb4a 0106 	adc.w	r1, sl, r6
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	461d      	mov	r5, r3
 8002e92:	f04f 0600 	mov.w	r6, #0
 8002e96:	196b      	adds	r3, r5, r5
 8002e98:	eb46 0406 	adc.w	r4, r6, r6
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	f7fd f998 	bl	80001d4 <__aeabi_uldivmod>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <UART_SetConfig+0x384>)
 8002eac:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	2164      	movs	r1, #100	; 0x64
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	3332      	adds	r3, #50	; 0x32
 8002ebe:	4a86      	ldr	r2, [pc, #536]	; (80030d8 <UART_SetConfig+0x384>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ecc:	4498      	add	r8, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	f04f 0600 	mov.w	r6, #0
 8002ed6:	46a9      	mov	r9, r5
 8002ed8:	46b2      	mov	sl, r6
 8002eda:	eb19 0309 	adds.w	r3, r9, r9
 8002ede:	eb4a 040a 	adc.w	r4, sl, sl
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	46a2      	mov	sl, r4
 8002ee6:	eb19 0905 	adds.w	r9, r9, r5
 8002eea:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002efa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002efe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f02:	4689      	mov	r9, r1
 8002f04:	4692      	mov	sl, r2
 8002f06:	eb19 0005 	adds.w	r0, r9, r5
 8002f0a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	461d      	mov	r5, r3
 8002f14:	f04f 0600 	mov.w	r6, #0
 8002f18:	196b      	adds	r3, r5, r5
 8002f1a:	eb46 0406 	adc.w	r4, r6, r6
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4623      	mov	r3, r4
 8002f22:	f7fd f957 	bl	80001d4 <__aeabi_uldivmod>
 8002f26:	4603      	mov	r3, r0
 8002f28:	460c      	mov	r4, r1
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <UART_SetConfig+0x384>)
 8002f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2164      	movs	r1, #100	; 0x64
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	3332      	adds	r3, #50	; 0x32
 8002f40:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <UART_SetConfig+0x384>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	f003 0207 	and.w	r2, r3, #7
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4442      	add	r2, r8
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e26f      	b.n	8003436 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f56:	f7ff fe87 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8002f5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	461d      	mov	r5, r3
 8002f60:	f04f 0600 	mov.w	r6, #0
 8002f64:	46a8      	mov	r8, r5
 8002f66:	46b1      	mov	r9, r6
 8002f68:	eb18 0308 	adds.w	r3, r8, r8
 8002f6c:	eb49 0409 	adc.w	r4, r9, r9
 8002f70:	4698      	mov	r8, r3
 8002f72:	46a1      	mov	r9, r4
 8002f74:	eb18 0805 	adds.w	r8, r8, r5
 8002f78:	eb49 0906 	adc.w	r9, r9, r6
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f90:	4688      	mov	r8, r1
 8002f92:	4691      	mov	r9, r2
 8002f94:	eb18 0005 	adds.w	r0, r8, r5
 8002f98:	eb49 0106 	adc.w	r1, r9, r6
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	461d      	mov	r5, r3
 8002fa2:	f04f 0600 	mov.w	r6, #0
 8002fa6:	196b      	adds	r3, r5, r5
 8002fa8:	eb46 0406 	adc.w	r4, r6, r6
 8002fac:	461a      	mov	r2, r3
 8002fae:	4623      	mov	r3, r4
 8002fb0:	f7fd f910 	bl	80001d4 <__aeabi_uldivmod>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <UART_SetConfig+0x384>)
 8002fbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	461d      	mov	r5, r3
 8002fca:	f04f 0600 	mov.w	r6, #0
 8002fce:	46a9      	mov	r9, r5
 8002fd0:	46b2      	mov	sl, r6
 8002fd2:	eb19 0309 	adds.w	r3, r9, r9
 8002fd6:	eb4a 040a 	adc.w	r4, sl, sl
 8002fda:	4699      	mov	r9, r3
 8002fdc:	46a2      	mov	sl, r4
 8002fde:	eb19 0905 	adds.w	r9, r9, r5
 8002fe2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ff6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ffa:	4689      	mov	r9, r1
 8002ffc:	4692      	mov	sl, r2
 8002ffe:	eb19 0005 	adds.w	r0, r9, r5
 8003002:	eb4a 0106 	adc.w	r1, sl, r6
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	461d      	mov	r5, r3
 800300c:	f04f 0600 	mov.w	r6, #0
 8003010:	196b      	adds	r3, r5, r5
 8003012:	eb46 0406 	adc.w	r4, r6, r6
 8003016:	461a      	mov	r2, r3
 8003018:	4623      	mov	r3, r4
 800301a:	f7fd f8db 	bl	80001d4 <__aeabi_uldivmod>
 800301e:	4603      	mov	r3, r0
 8003020:	460c      	mov	r4, r1
 8003022:	461a      	mov	r2, r3
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <UART_SetConfig+0x384>)
 8003026:	fba3 1302 	umull	r1, r3, r3, r2
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2164      	movs	r1, #100	; 0x64
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	3332      	adds	r3, #50	; 0x32
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <UART_SetConfig+0x384>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003046:	4498      	add	r8, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	461d      	mov	r5, r3
 800304c:	f04f 0600 	mov.w	r6, #0
 8003050:	46a9      	mov	r9, r5
 8003052:	46b2      	mov	sl, r6
 8003054:	eb19 0309 	adds.w	r3, r9, r9
 8003058:	eb4a 040a 	adc.w	r4, sl, sl
 800305c:	4699      	mov	r9, r3
 800305e:	46a2      	mov	sl, r4
 8003060:	eb19 0905 	adds.w	r9, r9, r5
 8003064:	eb4a 0a06 	adc.w	sl, sl, r6
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003074:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003078:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800307c:	4689      	mov	r9, r1
 800307e:	4692      	mov	sl, r2
 8003080:	eb19 0005 	adds.w	r0, r9, r5
 8003084:	eb4a 0106 	adc.w	r1, sl, r6
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	461d      	mov	r5, r3
 800308e:	f04f 0600 	mov.w	r6, #0
 8003092:	196b      	adds	r3, r5, r5
 8003094:	eb46 0406 	adc.w	r4, r6, r6
 8003098:	461a      	mov	r2, r3
 800309a:	4623      	mov	r3, r4
 800309c:	f7fd f89a 	bl	80001d4 <__aeabi_uldivmod>
 80030a0:	4603      	mov	r3, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <UART_SetConfig+0x384>)
 80030a8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2164      	movs	r1, #100	; 0x64
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <UART_SetConfig+0x384>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	f003 0207 	and.w	r2, r3, #7
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4442      	add	r2, r8
 80030cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030ce:	e1b2      	b.n	8003436 <UART_SetConfig+0x6e2>
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40011400 	.word	0x40011400
 80030d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4ad7      	ldr	r2, [pc, #860]	; (8003440 <UART_SetConfig+0x6ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d005      	beq.n	80030f2 <UART_SetConfig+0x39e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4ad6      	ldr	r2, [pc, #856]	; (8003444 <UART_SetConfig+0x6f0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	f040 80d1 	bne.w	8003294 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030f2:	f7ff fdcd 	bl	8002c90 <HAL_RCC_GetPCLK2Freq>
 80030f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	469a      	mov	sl, r3
 80030fc:	f04f 0b00 	mov.w	fp, #0
 8003100:	46d0      	mov	r8, sl
 8003102:	46d9      	mov	r9, fp
 8003104:	eb18 0308 	adds.w	r3, r8, r8
 8003108:	eb49 0409 	adc.w	r4, r9, r9
 800310c:	4698      	mov	r8, r3
 800310e:	46a1      	mov	r9, r4
 8003110:	eb18 080a 	adds.w	r8, r8, sl
 8003114:	eb49 090b 	adc.w	r9, r9, fp
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003124:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003128:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800312c:	4688      	mov	r8, r1
 800312e:	4691      	mov	r9, r2
 8003130:	eb1a 0508 	adds.w	r5, sl, r8
 8003134:	eb4b 0609 	adc.w	r6, fp, r9
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4619      	mov	r1, r3
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	f04f 0400 	mov.w	r4, #0
 800314a:	0094      	lsls	r4, r2, #2
 800314c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003150:	008b      	lsls	r3, r1, #2
 8003152:	461a      	mov	r2, r3
 8003154:	4623      	mov	r3, r4
 8003156:	4628      	mov	r0, r5
 8003158:	4631      	mov	r1, r6
 800315a:	f7fd f83b 	bl	80001d4 <__aeabi_uldivmod>
 800315e:	4603      	mov	r3, r0
 8003160:	460c      	mov	r4, r1
 8003162:	461a      	mov	r2, r3
 8003164:	4bb8      	ldr	r3, [pc, #736]	; (8003448 <UART_SetConfig+0x6f4>)
 8003166:	fba3 2302 	umull	r2, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	469b      	mov	fp, r3
 8003174:	f04f 0c00 	mov.w	ip, #0
 8003178:	46d9      	mov	r9, fp
 800317a:	46e2      	mov	sl, ip
 800317c:	eb19 0309 	adds.w	r3, r9, r9
 8003180:	eb4a 040a 	adc.w	r4, sl, sl
 8003184:	4699      	mov	r9, r3
 8003186:	46a2      	mov	sl, r4
 8003188:	eb19 090b 	adds.w	r9, r9, fp
 800318c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800319c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031a4:	4689      	mov	r9, r1
 80031a6:	4692      	mov	sl, r2
 80031a8:	eb1b 0509 	adds.w	r5, fp, r9
 80031ac:	eb4c 060a 	adc.w	r6, ip, sl
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4619      	mov	r1, r3
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	f04f 0400 	mov.w	r4, #0
 80031c2:	0094      	lsls	r4, r2, #2
 80031c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031c8:	008b      	lsls	r3, r1, #2
 80031ca:	461a      	mov	r2, r3
 80031cc:	4623      	mov	r3, r4
 80031ce:	4628      	mov	r0, r5
 80031d0:	4631      	mov	r1, r6
 80031d2:	f7fc ffff 	bl	80001d4 <__aeabi_uldivmod>
 80031d6:	4603      	mov	r3, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	461a      	mov	r2, r3
 80031dc:	4b9a      	ldr	r3, [pc, #616]	; (8003448 <UART_SetConfig+0x6f4>)
 80031de:	fba3 1302 	umull	r1, r3, r3, r2
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2164      	movs	r1, #100	; 0x64
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	3332      	adds	r3, #50	; 0x32
 80031f0:	4a95      	ldr	r2, [pc, #596]	; (8003448 <UART_SetConfig+0x6f4>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fc:	4498      	add	r8, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	469b      	mov	fp, r3
 8003202:	f04f 0c00 	mov.w	ip, #0
 8003206:	46d9      	mov	r9, fp
 8003208:	46e2      	mov	sl, ip
 800320a:	eb19 0309 	adds.w	r3, r9, r9
 800320e:	eb4a 040a 	adc.w	r4, sl, sl
 8003212:	4699      	mov	r9, r3
 8003214:	46a2      	mov	sl, r4
 8003216:	eb19 090b 	adds.w	r9, r9, fp
 800321a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800322a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800322e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003232:	4689      	mov	r9, r1
 8003234:	4692      	mov	sl, r2
 8003236:	eb1b 0509 	adds.w	r5, fp, r9
 800323a:	eb4c 060a 	adc.w	r6, ip, sl
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4619      	mov	r1, r3
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	f04f 0400 	mov.w	r4, #0
 8003250:	0094      	lsls	r4, r2, #2
 8003252:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003256:	008b      	lsls	r3, r1, #2
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	4628      	mov	r0, r5
 800325e:	4631      	mov	r1, r6
 8003260:	f7fc ffb8 	bl	80001d4 <__aeabi_uldivmod>
 8003264:	4603      	mov	r3, r0
 8003266:	460c      	mov	r4, r1
 8003268:	461a      	mov	r2, r3
 800326a:	4b77      	ldr	r3, [pc, #476]	; (8003448 <UART_SetConfig+0x6f4>)
 800326c:	fba3 1302 	umull	r1, r3, r3, r2
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	2164      	movs	r1, #100	; 0x64
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	3332      	adds	r3, #50	; 0x32
 800327e:	4a72      	ldr	r2, [pc, #456]	; (8003448 <UART_SetConfig+0x6f4>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	f003 020f 	and.w	r2, r3, #15
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4442      	add	r2, r8
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	e0d0      	b.n	8003436 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003294:	f7ff fce8 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8003298:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	469a      	mov	sl, r3
 800329e:	f04f 0b00 	mov.w	fp, #0
 80032a2:	46d0      	mov	r8, sl
 80032a4:	46d9      	mov	r9, fp
 80032a6:	eb18 0308 	adds.w	r3, r8, r8
 80032aa:	eb49 0409 	adc.w	r4, r9, r9
 80032ae:	4698      	mov	r8, r3
 80032b0:	46a1      	mov	r9, r4
 80032b2:	eb18 080a 	adds.w	r8, r8, sl
 80032b6:	eb49 090b 	adc.w	r9, r9, fp
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032ce:	4688      	mov	r8, r1
 80032d0:	4691      	mov	r9, r2
 80032d2:	eb1a 0508 	adds.w	r5, sl, r8
 80032d6:	eb4b 0609 	adc.w	r6, fp, r9
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4619      	mov	r1, r3
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f04f 0400 	mov.w	r4, #0
 80032ec:	0094      	lsls	r4, r2, #2
 80032ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032f2:	008b      	lsls	r3, r1, #2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	4631      	mov	r1, r6
 80032fc:	f7fc ff6a 	bl	80001d4 <__aeabi_uldivmod>
 8003300:	4603      	mov	r3, r0
 8003302:	460c      	mov	r4, r1
 8003304:	461a      	mov	r2, r3
 8003306:	4b50      	ldr	r3, [pc, #320]	; (8003448 <UART_SetConfig+0x6f4>)
 8003308:	fba3 2302 	umull	r2, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	469b      	mov	fp, r3
 8003316:	f04f 0c00 	mov.w	ip, #0
 800331a:	46d9      	mov	r9, fp
 800331c:	46e2      	mov	sl, ip
 800331e:	eb19 0309 	adds.w	r3, r9, r9
 8003322:	eb4a 040a 	adc.w	r4, sl, sl
 8003326:	4699      	mov	r9, r3
 8003328:	46a2      	mov	sl, r4
 800332a:	eb19 090b 	adds.w	r9, r9, fp
 800332e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003346:	4689      	mov	r9, r1
 8003348:	4692      	mov	sl, r2
 800334a:	eb1b 0509 	adds.w	r5, fp, r9
 800334e:	eb4c 060a 	adc.w	r6, ip, sl
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	0094      	lsls	r4, r2, #2
 8003366:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800336a:	008b      	lsls	r3, r1, #2
 800336c:	461a      	mov	r2, r3
 800336e:	4623      	mov	r3, r4
 8003370:	4628      	mov	r0, r5
 8003372:	4631      	mov	r1, r6
 8003374:	f7fc ff2e 	bl	80001d4 <__aeabi_uldivmod>
 8003378:	4603      	mov	r3, r0
 800337a:	460c      	mov	r4, r1
 800337c:	461a      	mov	r2, r3
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <UART_SetConfig+0x6f4>)
 8003380:	fba3 1302 	umull	r1, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2164      	movs	r1, #100	; 0x64
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	3332      	adds	r3, #50	; 0x32
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <UART_SetConfig+0x6f4>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339e:	4498      	add	r8, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	469b      	mov	fp, r3
 80033a4:	f04f 0c00 	mov.w	ip, #0
 80033a8:	46d9      	mov	r9, fp
 80033aa:	46e2      	mov	sl, ip
 80033ac:	eb19 0309 	adds.w	r3, r9, r9
 80033b0:	eb4a 040a 	adc.w	r4, sl, sl
 80033b4:	4699      	mov	r9, r3
 80033b6:	46a2      	mov	sl, r4
 80033b8:	eb19 090b 	adds.w	r9, r9, fp
 80033bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033d4:	4689      	mov	r9, r1
 80033d6:	4692      	mov	sl, r2
 80033d8:	eb1b 0509 	adds.w	r5, fp, r9
 80033dc:	eb4c 060a 	adc.w	r6, ip, sl
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4619      	mov	r1, r3
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	0094      	lsls	r4, r2, #2
 80033f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f8:	008b      	lsls	r3, r1, #2
 80033fa:	461a      	mov	r2, r3
 80033fc:	4623      	mov	r3, r4
 80033fe:	4628      	mov	r0, r5
 8003400:	4631      	mov	r1, r6
 8003402:	f7fc fee7 	bl	80001d4 <__aeabi_uldivmod>
 8003406:	4603      	mov	r3, r0
 8003408:	460c      	mov	r4, r1
 800340a:	461a      	mov	r2, r3
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <UART_SetConfig+0x6f4>)
 800340e:	fba3 1302 	umull	r1, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2164      	movs	r1, #100	; 0x64
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	3332      	adds	r3, #50	; 0x32
 8003420:	4a09      	ldr	r2, [pc, #36]	; (8003448 <UART_SetConfig+0x6f4>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4442      	add	r2, r8
 8003432:	609a      	str	r2, [r3, #8]
}
 8003434:	e7ff      	b.n	8003436 <UART_SetConfig+0x6e2>
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003440:	40011000 	.word	0x40011000
 8003444:	40011400 	.word	0x40011400
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800344c:	b084      	sub	sp, #16
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	f107 001c 	add.w	r0, r7, #28
 800345a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d122      	bne.n	80034aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800348c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f001 fac6 	bl	8004a30 <USB_CoreReset>
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e01a      	b.n	80034e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 faba 	bl	8004a30 <USB_CoreReset>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
 80034d2:	e005      	b.n	80034e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10b      	bne.n	80034fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f043 0206 	orr.w	r2, r3, #6
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800350a:	b004      	add	sp, #16
 800350c:	4770      	bx	lr
	...

08003510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d165      	bne.n	80035f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4a41      	ldr	r2, [pc, #260]	; (800362c <USB_SetTurnaroundTime+0x11c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d906      	bls.n	800353a <USB_SetTurnaroundTime+0x2a>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4a40      	ldr	r2, [pc, #256]	; (8003630 <USB_SetTurnaroundTime+0x120>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d802      	bhi.n	800353a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003534:	230f      	movs	r3, #15
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e062      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4a3c      	ldr	r2, [pc, #240]	; (8003630 <USB_SetTurnaroundTime+0x120>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d906      	bls.n	8003550 <USB_SetTurnaroundTime+0x40>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4a3b      	ldr	r2, [pc, #236]	; (8003634 <USB_SetTurnaroundTime+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800354a:	230e      	movs	r3, #14
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e057      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a38      	ldr	r2, [pc, #224]	; (8003634 <USB_SetTurnaroundTime+0x124>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d906      	bls.n	8003566 <USB_SetTurnaroundTime+0x56>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4a37      	ldr	r2, [pc, #220]	; (8003638 <USB_SetTurnaroundTime+0x128>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d802      	bhi.n	8003566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003560:	230d      	movs	r3, #13
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	e04c      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a33      	ldr	r2, [pc, #204]	; (8003638 <USB_SetTurnaroundTime+0x128>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d906      	bls.n	800357c <USB_SetTurnaroundTime+0x6c>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a32      	ldr	r2, [pc, #200]	; (800363c <USB_SetTurnaroundTime+0x12c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d802      	bhi.n	800357c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003576:	230c      	movs	r3, #12
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e041      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a2f      	ldr	r2, [pc, #188]	; (800363c <USB_SetTurnaroundTime+0x12c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d906      	bls.n	8003592 <USB_SetTurnaroundTime+0x82>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4a2e      	ldr	r2, [pc, #184]	; (8003640 <USB_SetTurnaroundTime+0x130>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d802      	bhi.n	8003592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800358c:	230b      	movs	r3, #11
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e036      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <USB_SetTurnaroundTime+0x130>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d906      	bls.n	80035a8 <USB_SetTurnaroundTime+0x98>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4a29      	ldr	r2, [pc, #164]	; (8003644 <USB_SetTurnaroundTime+0x134>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d802      	bhi.n	80035a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035a2:	230a      	movs	r3, #10
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e02b      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4a26      	ldr	r2, [pc, #152]	; (8003644 <USB_SetTurnaroundTime+0x134>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d906      	bls.n	80035be <USB_SetTurnaroundTime+0xae>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a25      	ldr	r2, [pc, #148]	; (8003648 <USB_SetTurnaroundTime+0x138>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d802      	bhi.n	80035be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035b8:	2309      	movs	r3, #9
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e020      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <USB_SetTurnaroundTime+0x138>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d906      	bls.n	80035d4 <USB_SetTurnaroundTime+0xc4>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a20      	ldr	r2, [pc, #128]	; (800364c <USB_SetTurnaroundTime+0x13c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d802      	bhi.n	80035d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035ce:	2308      	movs	r3, #8
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e015      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <USB_SetTurnaroundTime+0x13c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d906      	bls.n	80035ea <USB_SetTurnaroundTime+0xda>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <USB_SetTurnaroundTime+0x140>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d802      	bhi.n	80035ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035e4:	2307      	movs	r3, #7
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e00a      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80035ea:	2306      	movs	r3, #6
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e007      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035f6:	2309      	movs	r3, #9
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e001      	b.n	8003600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80035fc:	2309      	movs	r3, #9
 80035fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	00d8acbf 	.word	0x00d8acbf
 8003630:	00e4e1bf 	.word	0x00e4e1bf
 8003634:	00f423ff 	.word	0x00f423ff
 8003638:	0106737f 	.word	0x0106737f
 800363c:	011a499f 	.word	0x011a499f
 8003640:	01312cff 	.word	0x01312cff
 8003644:	014ca43f 	.word	0x014ca43f
 8003648:	016e35ff 	.word	0x016e35ff
 800364c:	01a6ab1f 	.word	0x01a6ab1f
 8003650:	01e847ff 	.word	0x01e847ff

08003654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0201 	bic.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d106      	bne.n	80036c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	e00b      	b.n	80036dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e001      	b.n	80036dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e003      	b.n	80036e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80036dc:	2032      	movs	r0, #50	; 0x32
 80036de:	f7fd fa1b 	bl	8000b18 <HAL_Delay>

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036ec:	b084      	sub	sp, #16
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80036fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	e009      	b.n	8003720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	3340      	adds	r3, #64	; 0x40
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	3301      	adds	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0e      	cmp	r3, #14
 8003724:	d9f2      	bls.n	800370c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11c      	bne.n	8003766 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373a:	f043 0302 	orr.w	r3, r3, #2
 800373e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
 8003764:	e00b      	b.n	800377e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003784:	461a      	mov	r2, r3
 8003786:	2300      	movs	r3, #0
 8003788:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003790:	4619      	mov	r1, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	461a      	mov	r2, r3
 800379a:	680b      	ldr	r3, [r1, #0]
 800379c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037aa:	2100      	movs	r1, #0
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f949 	bl	8003a44 <USB_SetDevSpeed>
 80037b2:	e008      	b.n	80037c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037b4:	2101      	movs	r1, #1
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f944 	bl	8003a44 <USB_SetDevSpeed>
 80037bc:	e003      	b.n	80037c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037be:	2103      	movs	r1, #3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f93f 	bl	8003a44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037c6:	2110      	movs	r1, #16
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8f3 	bl	80039b4 <USB_FlushTxFifo>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f911 	bl	8003a00 <USB_FlushRxFifo>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	461a      	mov	r2, r3
 80037f0:	2300      	movs	r3, #0
 80037f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fa:	461a      	mov	r2, r3
 80037fc:	2300      	movs	r3, #0
 80037fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800380c:	2300      	movs	r3, #0
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	e043      	b.n	800389a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003828:	d118      	bne.n	800385c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	461a      	mov	r2, r3
 800383e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e013      	b.n	800386e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003852:	461a      	mov	r2, r3
 8003854:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e008      	b.n	800386e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	461a      	mov	r2, r3
 800386a:	2300      	movs	r3, #0
 800386c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387a:	461a      	mov	r2, r3
 800387c:	2300      	movs	r3, #0
 800387e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003892:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	3301      	adds	r3, #1
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3b7      	bcc.n	8003812 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e043      	b.n	8003930 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038be:	d118      	bne.n	80038f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	461a      	mov	r2, r3
 80038d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e013      	b.n	8003904 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e8:	461a      	mov	r2, r3
 80038ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e008      	b.n	8003904 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	2300      	movs	r3, #0
 8003902:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	461a      	mov	r2, r3
 8003912:	2300      	movs	r3, #0
 8003914:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003928:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d3b7      	bcc.n	80038a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003958:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699a      	ldr	r2, [r3, #24]
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <USB_DevInit+0x2c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f043 0208 	orr.w	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800398a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ac:	b004      	add	sp, #16
 80039ae:	4770      	bx	lr
 80039b0:	803c3800 	.word	0x803c3800

080039b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3301      	adds	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <USB_FlushTxFifo+0x48>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d0f0      	beq.n	80039ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	00030d40 	.word	0x00030d40

08003a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2210      	movs	r2, #16
 8003a10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a09      	ldr	r2, [pc, #36]	; (8003a40 <USB_FlushRxFifo+0x40>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e006      	b.n	8003a32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d0f0      	beq.n	8003a12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	00030d40 	.word	0x00030d40

08003a44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b087      	sub	sp, #28
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0306 	and.w	r3, r3, #6
 8003a8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
 8003a9a:	e00a      	b.n	8003ab2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d002      	beq.n	8003aa8 <USB_GetDevSpeed+0x32>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d102      	bne.n	8003aae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	75fb      	strb	r3, [r7, #23]
 8003aac:	e001      	b.n	8003ab2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003aae:	230f      	movs	r3, #15
 8003ab0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d13a      	bne.n	8003b52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f303 	lsl.w	r3, r1, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d155      	bne.n	8003bc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	78db      	ldrb	r3, [r3, #3]
 8003b2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	059b      	lsls	r3, r3, #22
 8003b36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e036      	b.n	8003bc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d11a      	bne.n	8003bc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d161      	bne.n	8003cb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c02:	d11f      	bne.n	8003c44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c64:	4013      	ands	r3, r2
 8003c66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0159      	lsls	r1, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	440b      	add	r3, r1
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <USB_DeactivateEndpoint+0x1b0>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
 8003cae:	e060      	b.n	8003d72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cc6:	d11f      	bne.n	8003d08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ce6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	43db      	mvns	r3, r3
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d28:	4013      	ands	r3, r2
 8003d2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	43db      	mvns	r3, r3
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0159      	lsls	r1, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	440b      	add	r3, r1
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <USB_DeactivateEndpoint+0x1b4>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	ec337800 	.word	0xec337800
 8003d84:	eff37800 	.word	0xeff37800

08003d88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 815c 	bne.w	8004062 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d132      	bne.n	8003e18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	0151      	lsls	r1, r2, #5
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	440a      	add	r2, r1
 8003dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e10:	0cdb      	lsrs	r3, r3, #19
 8003e12:	04db      	lsls	r3, r3, #19
 8003e14:	6113      	str	r3, [r2, #16]
 8003e16:	e074      	b.n	8003f02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e32:	0cdb      	lsrs	r3, r3, #19
 8003e34:	04db      	lsls	r3, r3, #19
 8003e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6959      	ldr	r1, [r3, #20]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	440b      	add	r3, r1
 8003e74:	1e59      	subs	r1, r3, #1
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e7e:	04d9      	lsls	r1, r3, #19
 8003e80:	4b9d      	ldr	r3, [pc, #628]	; (80040f8 <USB_EPStartXfer+0x370>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	0148      	lsls	r0, r1, #5
 8003e88:	69f9      	ldr	r1, [r7, #28]
 8003e8a:	4401      	add	r1, r0
 8003e8c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e90:	4313      	orrs	r3, r2
 8003e92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	69b9      	ldr	r1, [r7, #24]
 8003eac:	0148      	lsls	r0, r1, #5
 8003eae:	69f9      	ldr	r1, [r7, #28]
 8003eb0:	4401      	add	r1, r0
 8003eb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	78db      	ldrb	r3, [r3, #3]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d11f      	bne.n	8003f02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003edc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ee0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d14b      	bne.n	8003fa0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	78db      	ldrb	r3, [r3, #3]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d128      	bne.n	8003f7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d110      	bne.n	8003f5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	e00f      	b.n	8003f7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	0151      	lsls	r1, r2, #5
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	440a      	add	r2, r1
 8003f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e12f      	b.n	8004200 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	78db      	ldrb	r3, [r3, #3]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d015      	beq.n	8003ff4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8117 	beq.w	8004200 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	69f9      	ldr	r1, [r7, #28]
 8003fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	634b      	str	r3, [r1, #52]	; 0x34
 8003ff2:	e105      	b.n	8004200 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d110      	bne.n	8004026 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e00f      	b.n	8004046 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	440a      	add	r2, r1
 800403c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	b298      	uxth	r0, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4603      	mov	r3, r0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fa2b 	bl	80044b6 <USB_WritePacket>
 8004060:	e0ce      	b.n	8004200 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407c:	0cdb      	lsrs	r3, r3, #19
 800407e:	04db      	lsls	r3, r3, #19
 8004080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d126      	bne.n	80040fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	0148      	lsls	r0, r1, #5
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	4401      	add	r1, r0
 80040cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040d0:	4313      	orrs	r3, r2
 80040d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040f2:	6113      	str	r3, [r2, #16]
 80040f4:	e036      	b.n	8004164 <USB_EPStartXfer+0x3dc>
 80040f6:	bf00      	nop
 80040f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4413      	add	r3, r2
 8004106:	1e5a      	subs	r2, r3, #1
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	8afb      	ldrh	r3, [r7, #22]
 8004122:	04d9      	lsls	r1, r3, #19
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <USB_EPStartXfer+0x484>)
 8004126:	400b      	ands	r3, r1
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	0148      	lsls	r0, r1, #5
 800412c:	69f9      	ldr	r1, [r7, #28]
 800412e:	4401      	add	r1, r0
 8004130:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	8af9      	ldrh	r1, [r7, #22]
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	0148      	lsls	r0, r1, #5
 8004158:	69f9      	ldr	r1, [r7, #28]
 800415a:	4401      	add	r1, r0
 800415c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004160:	4313      	orrs	r3, r2
 8004162:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10d      	bne.n	8004186 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	68d9      	ldr	r1, [r3, #12]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	460a      	mov	r2, r1
 8004184:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	78db      	ldrb	r3, [r3, #3]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d128      	bne.n	80041e0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00f      	b.n	80041e0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	0151      	lsls	r1, r2, #5
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	440a      	add	r2, r1
 80041d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	1ff80000 	.word	0x1ff80000

08004210 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	2b01      	cmp	r3, #1
 800422e:	f040 80cd 	bne.w	80043cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d132      	bne.n	80042a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800425c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	440a      	add	r2, r1
 8004274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800427c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	440a      	add	r2, r1
 8004294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004298:	0cdb      	lsrs	r3, r3, #19
 800429a:	04db      	lsls	r3, r3, #19
 800429c:	6113      	str	r3, [r2, #16]
 800429e:	e04e      	b.n	800433e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ba:	0cdb      	lsrs	r3, r3, #19
 80042bc:	04db      	lsls	r3, r3, #19
 80042be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d903      	bls.n	80042f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	0151      	lsls	r1, r2, #5
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	440a      	add	r2, r1
 800430e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004312:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432e:	6939      	ldr	r1, [r7, #16]
 8004330:	0148      	lsls	r0, r1, #5
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	4401      	add	r1, r0
 8004336:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800433a:	4313      	orrs	r3, r2
 800433c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d11e      	bne.n	8004382 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800437a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e092      	b.n	80044a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	440a      	add	r2, r1
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07e      	beq.n	80044a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	2101      	movs	r1, #1
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c6:	4313      	orrs	r3, r2
 80043c8:	634b      	str	r3, [r1, #52]	; 0x34
 80043ca:	e06d      	b.n	80044a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e6:	0cdb      	lsrs	r3, r3, #19
 80043e8:	04db      	lsls	r3, r3, #19
 80043ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	440a      	add	r2, r1
 8004402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800440a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800440e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800443e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004456:	6939      	ldr	r1, [r7, #16]
 8004458:	0148      	lsls	r0, r1, #5
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	4401      	add	r1, r0
 800445e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004462:	4313      	orrs	r3, r2
 8004464:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10d      	bne.n	8004488 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	68d9      	ldr	r1, [r3, #12]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	460a      	mov	r2, r1
 8004486:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	0151      	lsls	r1, r2, #5
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	440a      	add	r2, r1
 800449e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b089      	sub	sp, #36	; 0x24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4611      	mov	r1, r2
 80044c2:	461a      	mov	r2, r3
 80044c4:	460b      	mov	r3, r1
 80044c6:	71fb      	strb	r3, [r7, #7]
 80044c8:	4613      	mov	r3, r2
 80044ca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80044d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11a      	bne.n	8004512 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80044dc:	88bb      	ldrh	r3, [r7, #4]
 80044de:	3303      	adds	r3, #3
 80044e0:	089b      	lsrs	r3, r3, #2
 80044e2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e00f      	b.n	800450a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	031a      	lsls	r2, r3, #12
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f6:	461a      	mov	r2, r3
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3304      	adds	r3, #4
 8004502:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	3301      	adds	r3, #1
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3eb      	bcc.n	80044ea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3724      	adds	r7, #36	; 0x24
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	3303      	adds	r3, #3
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e00b      	b.n	800455c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3304      	adds	r3, #4
 8004554:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	3301      	adds	r3, #1
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3ef      	bcc.n	8004544 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004564:	69fb      	ldr	r3, [r7, #28]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d12c      	bne.n	80045e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db12      	blt.n	80045c6 <USB_EPSetStall+0x54>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00f      	beq.n	80045c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e02b      	b.n	8004640 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	db12      	blt.n	8004620 <USB_EPSetStall+0xae>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00f      	beq.n	8004620 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800461e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	440a      	add	r2, r1
 8004636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800463e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d128      	bne.n	80046bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	440a      	add	r2, r1
 8004680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004684:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004688:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	78db      	ldrb	r3, [r3, #3]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d003      	beq.n	800469a <USB_EPClearStall+0x4c>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	78db      	ldrb	r3, [r3, #3]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d138      	bne.n	800470c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	0151      	lsls	r1, r2, #5
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	440a      	add	r2, r1
 80046b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e027      	b.n	800470c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	78db      	ldrb	r3, [r3, #3]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d003      	beq.n	80046ec <USB_EPClearStall+0x9e>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	78db      	ldrb	r3, [r3, #3]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d10f      	bne.n	800470c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	0151      	lsls	r1, r2, #5
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	440a      	add	r2, r1
 8004702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800471a:	b480      	push	{r7}
 800471c:	b085      	sub	sp, #20
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004738:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800473c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004780:	f023 0303 	bic.w	r3, r3, #3
 8004784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004794:	f023 0302 	bic.w	r3, r3, #2
 8004798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d6:	f043 0302 	orr.w	r3, r3, #2
 80047da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4013      	ands	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004802:	68fb      	ldr	r3, [r7, #12]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	0c1b      	lsrs	r3, r3, #16
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4013      	ands	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	b29b      	uxth	r3, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048a6:	68bb      	ldr	r3, [r7, #8]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	01db      	lsls	r3, r3, #7
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004902:	68bb      	ldr	r3, [r7, #8]
}
 8004904:	4618      	mov	r0, r3
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0301 	and.w	r3, r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004946:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800494a:	f023 0307 	bic.w	r3, r3, #7
 800494e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	460b      	mov	r3, r1
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	333c      	adds	r3, #60	; 0x3c
 800498a:	3304      	adds	r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <USB_EP0_OutStart+0xb8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d90a      	bls.n	80049ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a8:	d101      	bne.n	80049ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e037      	b.n	8004a1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f043 0318 	orr.w	r3, r3, #24
 80049e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d10f      	bne.n	8004a1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	461a      	mov	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	4f54300a 	.word	0x4f54300a

08004a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <USB_CoreReset+0x64>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e01b      	b.n	8004a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	daf2      	bge.n	8004a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <USB_CoreReset+0x64>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e006      	b.n	8004a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d0f0      	beq.n	8004a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	00030d40 	.word	0x00030d40

08004a98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004aa4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004aa8:	f002 f960 	bl	8006d6c <malloc>
 8004aac:	4603      	mov	r3, r0
 8004aae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e066      	b.n	8004b90 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7c1b      	ldrb	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	2181      	movs	r1, #129	; 0x81
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f001 ffcd 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aea:	2202      	movs	r2, #2
 8004aec:	2101      	movs	r1, #1
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 ffc3 	bl	8006a7a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2210      	movs	r2, #16
 8004b00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004b04:	e016      	b.n	8004b34 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b06:	2340      	movs	r3, #64	; 0x40
 8004b08:	2202      	movs	r2, #2
 8004b0a:	2181      	movs	r1, #129	; 0x81
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f001 ffb4 	bl	8006a7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f001 ffab 	bl	8006a7a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b34:	2308      	movs	r3, #8
 8004b36:	2203      	movs	r2, #3
 8004b38:	2182      	movs	r1, #130	; 0x82
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 ff9d 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7c1b      	ldrb	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d109      	bne.n	8004b7e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b74:	2101      	movs	r1, #1
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f002 f86e 	bl	8006c58 <USBD_LL_PrepareReceive>
 8004b7c:	e007      	b.n	8004b8e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b84:	2340      	movs	r3, #64	; 0x40
 8004b86:	2101      	movs	r1, #1
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f002 f865 	bl	8006c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ba8:	2181      	movs	r1, #129	; 0x81
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 ff8b 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 ff84 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004bc6:	2182      	movs	r1, #130	; 0x82
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 ff7c 	bl	8006ac6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00e      	beq.n	8004c06 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f002 f8bf 	bl	8006d7c <free>
    pdev->pClassData = NULL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03a      	beq.n	8004cb0 <USBD_CDC_Setup+0xa0>
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	f040 8097 	bne.w	8004d6e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	88db      	ldrh	r3, [r3, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d029      	beq.n	8004c9c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da11      	bge.n	8004c76 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004c5e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	88d2      	ldrh	r2, [r2, #6]
 8004c64:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c66:	6939      	ldr	r1, [r7, #16]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	88db      	ldrh	r3, [r3, #6]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 fa9d 	bl	80061ae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004c74:	e082      	b.n	8004d7c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	785a      	ldrb	r2, [r3, #1]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	88db      	ldrh	r3, [r3, #6]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004c8c:	6939      	ldr	r1, [r7, #16]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	88db      	ldrh	r3, [r3, #6]
 8004c92:	461a      	mov	r2, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f001 fab6 	bl	8006206 <USBD_CtlPrepareRx>
    break;
 8004c9a:	e06f      	b.n	8004d7c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	7850      	ldrb	r0, [r2, #1]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	4798      	blx	r3
    break;
 8004cae:	e065      	b.n	8004d7c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b0b      	cmp	r3, #11
 8004cb6:	d84f      	bhi.n	8004d58 <USBD_CDC_Setup+0x148>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <USBD_CDC_Setup+0xb0>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cf1 	.word	0x08004cf1
 8004cc4:	08004d67 	.word	0x08004d67
 8004cc8:	08004d59 	.word	0x08004d59
 8004ccc:	08004d59 	.word	0x08004d59
 8004cd0:	08004d59 	.word	0x08004d59
 8004cd4:	08004d59 	.word	0x08004d59
 8004cd8:	08004d59 	.word	0x08004d59
 8004cdc:	08004d59 	.word	0x08004d59
 8004ce0:	08004d59 	.word	0x08004d59
 8004ce4:	08004d59 	.word	0x08004d59
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d41 	.word	0x08004d41
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d107      	bne.n	8004d0a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fa53 	bl	80061ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d08:	e030      	b.n	8004d6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f001 f9dd 	bl	80060cc <USBD_CtlError>
        ret = USBD_FAIL;
 8004d12:	2303      	movs	r3, #3
 8004d14:	75fb      	strb	r3, [r7, #23]
      break;
 8004d16:	e029      	b.n	8004d6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d107      	bne.n	8004d32 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d22:	f107 030f 	add.w	r3, r7, #15
 8004d26:	2201      	movs	r2, #1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 fa3f 	bl	80061ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004d30:	e01c      	b.n	8004d6c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 f9c9 	bl	80060cc <USBD_CtlError>
        ret = USBD_FAIL;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3e:	e015      	b.n	8004d6c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d00f      	beq.n	8004d6a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f001 f9bd 	bl	80060cc <USBD_CtlError>
        ret = USBD_FAIL;
 8004d52:	2303      	movs	r3, #3
 8004d54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004d56:	e008      	b.n	8004d6a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f001 f9b6 	bl	80060cc <USBD_CtlError>
      ret = USBD_FAIL;
 8004d60:	2303      	movs	r3, #3
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	e002      	b.n	8004d6c <USBD_CDC_Setup+0x15c>
      break;
 8004d66:	bf00      	nop
 8004d68:	e008      	b.n	8004d7c <USBD_CDC_Setup+0x16c>
      break;
 8004d6a:	bf00      	nop
    }
    break;
 8004d6c:	e006      	b.n	8004d7c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f001 f9ab 	bl	80060cc <USBD_CtlError>
    ret = USBD_FAIL;
 8004d76:	2303      	movs	r3, #3
 8004d78:	75fb      	strb	r3, [r7, #23]
    break;
 8004d7a:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop

08004d88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004d9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e049      	b.n	8004e3e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004db0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d029      	beq.n	8004e1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3318      	adds	r3, #24
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	78f9      	ldrb	r1, [r7, #3]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	460b      	mov	r3, r1
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	1a5b      	subs	r3, r3, r1
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4403      	add	r3, r0
 8004de8:	3344      	adds	r3, #68	; 0x44
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	fbb2 f1f3 	udiv	r1, r2, r3
 8004df0:	fb03 f301 	mul.w	r3, r3, r1
 8004df4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d110      	bne.n	8004e1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3318      	adds	r3, #24
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e0e:	78f9      	ldrb	r1, [r7, #3]
 8004e10:	2300      	movs	r3, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fefe 	bl	8006c16 <USBD_LL_Transmit>
 8004e1a:	e00f      	b.n	8004e3c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e015      	b.n	8004e94 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 ff14 	bl	8006c9a <USBD_LL_GetRxDataSize>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eaa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d015      	beq.n	8004ee2 <USBD_CDC_EP0_RxReady+0x46>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ebc:	2bff      	cmp	r3, #255	; 0xff
 8004ebe:	d010      	beq.n	8004ee2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004ece:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	22ff      	movs	r2, #255	; 0xff
 8004ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2243      	movs	r2, #67	; 0x43
 8004ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004efa:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	20000094 	.word	0x20000094

08004f0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2243      	movs	r2, #67	; 0x43
 8004f18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004f1a:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000050 	.word	0x20000050

08004f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2243      	movs	r2, #67	; 0x43
 8004f38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004f3a:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	200000d8 	.word	0x200000d8

08004f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	220a      	movs	r2, #10
 8004f58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f5a:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	2000000c 	.word	0x2000000c

08004f6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e004      	b.n	8004f8a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fd8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ffe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800500e:	2303      	movs	r3, #3
 8005010:	e01a      	b.n	8005048 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005018:	2b00      	cmp	r3, #0
 800501a:	d114      	bne.n	8005046 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2201      	movs	r2, #1
 8005020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800503a:	2181      	movs	r1, #129	; 0x81
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 fdea 	bl	8006c16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800506a:	2303      	movs	r3, #3
 800506c:	e016      	b.n	800509c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	7c1b      	ldrb	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800507c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005080:	2101      	movs	r1, #1
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fde8 	bl	8006c58 <USBD_LL_PrepareReceive>
 8005088:	e007      	b.n	800509a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005090:	2340      	movs	r3, #64	; 0x40
 8005092:	2101      	movs	r1, #1
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 fddf 	bl	8006c58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e025      	b.n	8005108 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	79fa      	ldrb	r2, [r7, #7]
 80050fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f001 fc55 	bl	80069ac <USBD_LL_Init>
 8005102:	4603      	mov	r3, r0
 8005104:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005106:	7dfb      	ldrb	r3, [r7, #23]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005124:	2303      	movs	r3, #3
 8005126:	e010      	b.n	800514a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f107 020e 	add.w	r2, r7, #14
 800513c:	4610      	mov	r0, r2
 800513e:	4798      	blx	r3
 8005140:	4602      	mov	r2, r0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fc72 	bl	8006a44 <USBD_LL_Start>
 8005160:	4603      	mov	r3, r0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800518c:	2303      	movs	r3, #3
 800518e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	4611      	mov	r1, r2
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	4611      	mov	r1, r2
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
  }

  return USBD_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 ff2c 	bl	8006058 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2b01      	cmp	r3, #1
 8005222:	d00e      	beq.n	8005242 <USBD_LL_SetupStage+0x5a>
 8005224:	2b01      	cmp	r3, #1
 8005226:	d302      	bcc.n	800522e <USBD_LL_SetupStage+0x46>
 8005228:	2b02      	cmp	r3, #2
 800522a:	d014      	beq.n	8005256 <USBD_LL_SetupStage+0x6e>
 800522c:	e01d      	b.n	800526a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa18 	bl	800566c <USBD_StdDevReq>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]
      break;
 8005240:	e020      	b.n	8005284 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa7c 	bl	8005748 <USBD_StdItfReq>
 8005250:	4603      	mov	r3, r0
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e016      	b.n	8005284 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fab8 	bl	80057d4 <USBD_StdEPReq>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
      break;
 8005268:	e00c      	b.n	8005284 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fc43 	bl	8006b04 <USBD_LL_StallEP>
 800527e:	4603      	mov	r3, r0
 8005280:	73fb      	strb	r3, [r7, #15]
      break;
 8005282:	bf00      	nop
  }

  return ret;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	460b      	mov	r3, r1
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d137      	bne.n	8005312 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d14a      	bne.n	800534a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d913      	bls.n	80052e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bf28      	it	cs
 80052da:	4613      	movcs	r3, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 ffad 	bl	8006240 <USBD_CtlContinueRx>
 80052e6:	e030      	b.n	800534a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d105      	bne.n	800530a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 ffa9 	bl	8006262 <USBD_CtlSendStatus>
 8005310:	e01b      	b.n	800534a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d013      	beq.n	8005346 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005324:	2b03      	cmp	r3, #3
 8005326:	d10e      	bne.n	8005346 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	7afa      	ldrb	r2, [r7, #11]
 8005332:	4611      	mov	r1, r2
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	4798      	blx	r3
 8005338:	4603      	mov	r3, r0
 800533a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	e002      	b.n	800534c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005346:	2303      	movs	r3, #3
 8005348:	e000      	b.n	800534c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	460b      	mov	r3, r1
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d16a      	bne.n	800543e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3314      	adds	r3, #20
 800536c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005374:	2b02      	cmp	r3, #2
 8005376:	d155      	bne.n	8005424 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	429a      	cmp	r2, r3
 8005382:	d914      	bls.n	80053ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	1ad2      	subs	r2, r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	461a      	mov	r2, r3
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 ff22 	bl	80061e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053a0:	2300      	movs	r3, #0
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f001 fc56 	bl	8006c58 <USBD_LL_PrepareReceive>
 80053ac:	e03a      	b.n	8005424 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d11c      	bne.n	80053f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d316      	bcc.n	80053f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d20f      	bcs.n	80053f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053d4:	2200      	movs	r2, #0
 80053d6:	2100      	movs	r1, #0
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 ff03 	bl	80061e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053e6:	2300      	movs	r3, #0
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f001 fc33 	bl	8006c58 <USBD_LL_PrepareReceive>
 80053f2:	e017      	b.n	8005424 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005406:	2b03      	cmp	r3, #3
 8005408:	d105      	bne.n	8005416 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005416:	2180      	movs	r1, #128	; 0x80
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f001 fb73 	bl	8006b04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 ff32 	bl	8006288 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d123      	bne.n	8005476 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fe9b 	bl	800516a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800543c:	e01b      	b.n	8005476 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d013      	beq.n	8005472 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005450:	2b03      	cmp	r3, #3
 8005452:	d10e      	bne.n	8005472 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	7afa      	ldrb	r2, [r7, #11]
 800545e:	4611      	mov	r1, r2
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	4798      	blx	r3
 8005464:	4603      	mov	r3, r0
 8005466:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	e002      	b.n	8005478 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005472:	2303      	movs	r3, #3
 8005474:	e000      	b.n	8005478 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	4611      	mov	r1, r2
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054c4:	2340      	movs	r3, #64	; 0x40
 80054c6:	2200      	movs	r2, #0
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 fad5 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2240      	movs	r2, #64	; 0x40
 80054dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	2200      	movs	r2, #0
 80054e4:	2180      	movs	r1, #128	; 0x80
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fac7 	bl	8006a7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2204      	movs	r2, #4
 800553a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555a:	2b04      	cmp	r3, #4
 800555c:	d105      	bne.n	800556a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005586:	2b03      	cmp	r3, #3
 8005588:	d10b      	bne.n	80055a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	460b      	mov	r3, r1
 80055b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	460b      	mov	r3, r1
 80055d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6852      	ldr	r2, [r2, #4]
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	4611      	mov	r1, r2
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
  }

  return USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800562e:	b480      	push	{r7}
 8005630:	b087      	sub	sp, #28
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3301      	adds	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800564c:	8a3b      	ldrh	r3, [r7, #16]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	b21a      	sxth	r2, r3
 8005652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005656:	4313      	orrs	r3, r2
 8005658:	b21b      	sxth	r3, r3
 800565a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800565c:	89fb      	ldrh	r3, [r7, #14]
}
 800565e:	4618      	mov	r0, r3
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005682:	2b20      	cmp	r3, #32
 8005684:	d004      	beq.n	8005690 <USBD_StdDevReq+0x24>
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d002      	beq.n	8005690 <USBD_StdDevReq+0x24>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <USBD_StdDevReq+0x38>
 800568e:	e050      	b.n	8005732 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
    break;
 80056a2:	e04b      	b.n	800573c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b09      	cmp	r3, #9
 80056aa:	d83c      	bhi.n	8005726 <USBD_StdDevReq+0xba>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <USBD_StdDevReq+0x48>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	08005709 	.word	0x08005709
 80056b8:	0800571d 	.word	0x0800571d
 80056bc:	08005727 	.word	0x08005727
 80056c0:	08005713 	.word	0x08005713
 80056c4:	08005727 	.word	0x08005727
 80056c8:	080056e7 	.word	0x080056e7
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	08005727 	.word	0x08005727
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	080056f1 	.word	0x080056f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f9ce 	bl	8005a80 <USBD_GetDescriptor>
      break;
 80056e4:	e024      	b.n	8005730 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fb33 	bl	8005d54 <USBD_SetAddress>
      break;
 80056ee:	e01f      	b.n	8005730 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fb70 	bl	8005dd8 <USBD_SetConfig>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e018      	b.n	8005730 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fc0d 	bl	8005f20 <USBD_GetConfig>
      break;
 8005706:	e013      	b.n	8005730 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fc3c 	bl	8005f88 <USBD_GetStatus>
      break;
 8005710:	e00e      	b.n	8005730 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fc6a 	bl	8005fee <USBD_SetFeature>
      break;
 800571a:	e009      	b.n	8005730 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fc79 	bl	8006016 <USBD_ClrFeature>
      break;
 8005724:	e004      	b.n	8005730 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fccf 	bl	80060cc <USBD_CtlError>
      break;
 800572e:	bf00      	nop
    }
    break;
 8005730:	e004      	b.n	800573c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fcc9 	bl	80060cc <USBD_CtlError>
    break;
 800573a:	bf00      	nop
  }

  return ret;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800575e:	2b20      	cmp	r3, #32
 8005760:	d003      	beq.n	800576a <USBD_StdItfReq+0x22>
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d001      	beq.n	800576a <USBD_StdItfReq+0x22>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d12a      	bne.n	80057c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005770:	3b01      	subs	r3, #1
 8005772:	2b02      	cmp	r3, #2
 8005774:	d81d      	bhi.n	80057b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	889b      	ldrh	r3, [r3, #4]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d813      	bhi.n	80057a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
 800578e:	4603      	mov	r3, r0
 8005790:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	88db      	ldrh	r3, [r3, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d110      	bne.n	80057bc <USBD_StdItfReq+0x74>
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10d      	bne.n	80057bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fd5e 	bl	8006262 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80057a6:	e009      	b.n	80057bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fc8e 	bl	80060cc <USBD_CtlError>
      break;
 80057b0:	e004      	b.n	80057bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc89 	bl	80060cc <USBD_CtlError>
      break;
 80057ba:	e000      	b.n	80057be <USBD_StdItfReq+0x76>
      break;
 80057bc:	bf00      	nop
    }
    break;
 80057be:	e004      	b.n	80057ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fc82 	bl	80060cc <USBD_CtlError>
    break;
 80057c8:	bf00      	nop
  }

  return ret;
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	889b      	ldrh	r3, [r3, #4]
 80057e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d004      	beq.n	80057fe <USBD_StdEPReq+0x2a>
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d002      	beq.n	80057fe <USBD_StdEPReq+0x2a>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <USBD_StdEPReq+0x3e>
 80057fc:	e135      	b.n	8005a6a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
 800580c:	4603      	mov	r3, r0
 800580e:	73fb      	strb	r3, [r7, #15]
    break;
 8005810:	e130      	b.n	8005a74 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d03e      	beq.n	8005898 <USBD_StdEPReq+0xc4>
 800581a:	2b03      	cmp	r3, #3
 800581c:	d002      	beq.n	8005824 <USBD_StdEPReq+0x50>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d077      	beq.n	8005912 <USBD_StdEPReq+0x13e>
 8005822:	e11c      	b.n	8005a5e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800582a:	2b02      	cmp	r3, #2
 800582c:	d002      	beq.n	8005834 <USBD_StdEPReq+0x60>
 800582e:	2b03      	cmp	r3, #3
 8005830:	d015      	beq.n	800585e <USBD_StdEPReq+0x8a>
 8005832:	e02b      	b.n	800588c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <USBD_StdEPReq+0x80>
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	2b80      	cmp	r3, #128	; 0x80
 800583e:	d009      	beq.n	8005854 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 f95d 	bl	8006b04 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 f959 	bl	8006b04 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005852:	e020      	b.n	8005896 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fc38 	bl	80060cc <USBD_CtlError>
        break;
 800585c:	e01b      	b.n	8005896 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	885b      	ldrh	r3, [r3, #2]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10e      	bne.n	8005884 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <USBD_StdEPReq+0xb0>
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b80      	cmp	r3, #128	; 0x80
 8005870:	d008      	beq.n	8005884 <USBD_StdEPReq+0xb0>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	88db      	ldrh	r3, [r3, #6]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 f940 	bl	8006b04 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fcec 	bl	8006262 <USBD_CtlSendStatus>

        break;
 800588a:	e004      	b.n	8005896 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fc1c 	bl	80060cc <USBD_CtlError>
        break;
 8005894:	bf00      	nop
      }
      break;
 8005896:	e0e7      	b.n	8005a68 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d002      	beq.n	80058a8 <USBD_StdEPReq+0xd4>
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d015      	beq.n	80058d2 <USBD_StdEPReq+0xfe>
 80058a6:	e02d      	b.n	8005904 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <USBD_StdEPReq+0xf4>
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	2b80      	cmp	r3, #128	; 0x80
 80058b2:	d009      	beq.n	80058c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 f923 	bl	8006b04 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 f91f 	bl	8006b04 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80058c6:	e023      	b.n	8005910 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fbfe 	bl	80060cc <USBD_CtlError>
        break;
 80058d0:	e01e      	b.n	8005910 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	885b      	ldrh	r3, [r3, #2]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d119      	bne.n	800590e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80058da:	7bbb      	ldrb	r3, [r7, #14]
 80058dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d004      	beq.n	80058ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80058e4:	7bbb      	ldrb	r3, [r7, #14]
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f92a 	bl	8006b42 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fcb7 	bl	8006262 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
        }
        break;
 8005902:	e004      	b.n	800590e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fbe0 	bl	80060cc <USBD_CtlError>
        break;
 800590c:	e000      	b.n	8005910 <USBD_StdEPReq+0x13c>
        break;
 800590e:	bf00      	nop
      }
      break;
 8005910:	e0aa      	b.n	8005a68 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005918:	2b02      	cmp	r3, #2
 800591a:	d002      	beq.n	8005922 <USBD_StdEPReq+0x14e>
 800591c:	2b03      	cmp	r3, #3
 800591e:	d032      	beq.n	8005986 <USBD_StdEPReq+0x1b2>
 8005920:	e097      	b.n	8005a52 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <USBD_StdEPReq+0x164>
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d004      	beq.n	8005938 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fbcb 	bl	80060cc <USBD_CtlError>
          break;
 8005936:	e091      	b.n	8005a5c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800593c:	2b00      	cmp	r3, #0
 800593e:	da0b      	bge.n	8005958 <USBD_StdEPReq+0x184>
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	3310      	adds	r3, #16
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	3304      	adds	r3, #4
 8005956:	e00b      	b.n	8005970 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005958:	7bbb      	ldrb	r3, [r7, #14]
 800595a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	3304      	adds	r3, #4
 8005970:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2202      	movs	r2, #2
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fc15 	bl	80061ae <USBD_CtlSendData>
        break;
 8005984:	e06a      	b.n	8005a5c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da11      	bge.n	80059b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	f003 020f 	and.w	r2, r3, #15
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3324      	adds	r3, #36	; 0x24
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d117      	bne.n	80059d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fb8e 	bl	80060cc <USBD_CtlError>
            break;
 80059b0:	e054      	b.n	8005a5c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb7b 	bl	80060cc <USBD_CtlError>
            break;
 80059d6:	e041      	b.n	8005a5c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da0b      	bge.n	80059f8 <USBD_StdEPReq+0x224>
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	3310      	adds	r3, #16
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	e00b      	b.n	8005a10 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3304      	adds	r3, #4
 8005a10:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <USBD_StdEPReq+0x24a>
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d103      	bne.n	8005a26 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e00e      	b.n	8005a44 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a26:	7bbb      	ldrb	r3, [r7, #14]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 f8a8 	bl	8006b80 <USBD_LL_IsStallEP>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e002      	b.n	8005a44 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2202      	movs	r2, #2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fbaf 	bl	80061ae <USBD_CtlSendData>
          break;
 8005a50:	e004      	b.n	8005a5c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fb39 	bl	80060cc <USBD_CtlError>
        break;
 8005a5a:	bf00      	nop
      }
      break;
 8005a5c:	e004      	b.n	8005a68 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb33 	bl	80060cc <USBD_CtlError>
      break;
 8005a66:	bf00      	nop
    }
    break;
 8005a68:	e004      	b.n	8005a74 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fb2d 	bl	80060cc <USBD_CtlError>
    break;
 8005a72:	bf00      	nop
  }

  return ret;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	885b      	ldrh	r3, [r3, #2]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	f200 8128 	bhi.w	8005cf6 <USBD_GetDescriptor+0x276>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <USBD_GetDescriptor+0x2c>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005ac9 	.word	0x08005ac9
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005b21 	.word	0x08005b21
 8005ab8:	08005cf7 	.word	0x08005cf7
 8005abc:	08005cf7 	.word	0x08005cf7
 8005ac0:	08005c97 	.word	0x08005c97
 8005ac4:	08005cc3 	.word	0x08005cc3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	7c12      	ldrb	r2, [r2, #16]
 8005ad4:	f107 0108 	add.w	r1, r7, #8
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	60f8      	str	r0, [r7, #12]
    break;
 8005ade:	e112      	b.n	8005d06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7c1b      	ldrb	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10d      	bne.n	8005b04 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	f107 0208 	add.w	r2, r7, #8
 8005af4:	4610      	mov	r0, r2
 8005af6:	4798      	blx	r3
 8005af8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	2202      	movs	r2, #2
 8005b00:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005b02:	e100      	b.n	8005d06 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	f107 0208 	add.w	r2, r7, #8
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	701a      	strb	r2, [r3, #0]
    break;
 8005b1e:	e0f2      	b.n	8005d06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	885b      	ldrh	r3, [r3, #2]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	f200 80ac 	bhi.w	8005c84 <USBD_GetDescriptor+0x204>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <USBD_GetDescriptor+0xb4>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b4d 	.word	0x08005b4d
 8005b38:	08005b81 	.word	0x08005b81
 8005b3c:	08005bb5 	.word	0x08005bb5
 8005b40:	08005be9 	.word	0x08005be9
 8005b44:	08005c1d 	.word	0x08005c1d
 8005b48:	08005c51 	.word	0x08005c51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	7c12      	ldrb	r2, [r2, #16]
 8005b64:	f107 0108 	add.w	r1, r7, #8
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
 8005b6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b6e:	e091      	b.n	8005c94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 faaa 	bl	80060cc <USBD_CtlError>
        err++;
 8005b78:	7afb      	ldrb	r3, [r7, #11]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	72fb      	strb	r3, [r7, #11]
      break;
 8005b7e:	e089      	b.n	8005c94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	7c12      	ldrb	r2, [r2, #16]
 8005b98:	f107 0108 	add.w	r1, r7, #8
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ba2:	e077      	b.n	8005c94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa90 	bl	80060cc <USBD_CtlError>
        err++;
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	72fb      	strb	r3, [r7, #11]
      break;
 8005bb2:	e06f      	b.n	8005c94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	7c12      	ldrb	r2, [r2, #16]
 8005bcc:	f107 0108 	add.w	r1, r7, #8
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
 8005bd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bd6:	e05d      	b.n	8005c94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fa76 	bl	80060cc <USBD_CtlError>
        err++;
 8005be0:	7afb      	ldrb	r3, [r7, #11]
 8005be2:	3301      	adds	r3, #1
 8005be4:	72fb      	strb	r3, [r7, #11]
      break;
 8005be6:	e055      	b.n	8005c94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	7c12      	ldrb	r2, [r2, #16]
 8005c00:	f107 0108 	add.w	r1, r7, #8
 8005c04:	4610      	mov	r0, r2
 8005c06:	4798      	blx	r3
 8005c08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c0a:	e043      	b.n	8005c94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa5c 	bl	80060cc <USBD_CtlError>
        err++;
 8005c14:	7afb      	ldrb	r3, [r7, #11]
 8005c16:	3301      	adds	r3, #1
 8005c18:	72fb      	strb	r3, [r7, #11]
      break;
 8005c1a:	e03b      	b.n	8005c94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	7c12      	ldrb	r2, [r2, #16]
 8005c34:	f107 0108 	add.w	r1, r7, #8
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4798      	blx	r3
 8005c3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c3e:	e029      	b.n	8005c94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa42 	bl	80060cc <USBD_CtlError>
        err++;
 8005c48:	7afb      	ldrb	r3, [r7, #11]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	72fb      	strb	r3, [r7, #11]
      break;
 8005c4e:	e021      	b.n	8005c94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	7c12      	ldrb	r2, [r2, #16]
 8005c68:	f107 0108 	add.w	r1, r7, #8
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4798      	blx	r3
 8005c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c72:	e00f      	b.n	8005c94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa28 	bl	80060cc <USBD_CtlError>
        err++;
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	72fb      	strb	r3, [r7, #11]
      break;
 8005c82:	e007      	b.n	8005c94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa20 	bl	80060cc <USBD_CtlError>
      err++;
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005c92:	bf00      	nop
    }
    break;
 8005c94:	e037      	b.n	8005d06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7c1b      	ldrb	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca6:	f107 0208 	add.w	r2, r7, #8
 8005caa:	4610      	mov	r0, r2
 8005cac:	4798      	blx	r3
 8005cae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005cb0:	e029      	b.n	8005d06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa09 	bl	80060cc <USBD_CtlError>
      err++;
 8005cba:	7afb      	ldrb	r3, [r7, #11]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	72fb      	strb	r3, [r7, #11]
    break;
 8005cc0:	e021      	b.n	8005d06 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	7c1b      	ldrb	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10d      	bne.n	8005ce6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f107 0208 	add.w	r2, r7, #8
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4798      	blx	r3
 8005cda:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ce4:	e00f      	b.n	8005d06 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f9ef 	bl	80060cc <USBD_CtlError>
      err++;
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	72fb      	strb	r3, [r7, #11]
    break;
 8005cf4:	e007      	b.n	8005d06 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f9e7 	bl	80060cc <USBD_CtlError>
    err++;
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	3301      	adds	r3, #1
 8005d02:	72fb      	strb	r3, [r7, #11]
    break;
 8005d04:	bf00      	nop
  }

  if (err != 0U)
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11e      	bne.n	8005d4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	88db      	ldrh	r3, [r3, #6]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d016      	beq.n	8005d42 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005d14:	893b      	ldrh	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00e      	beq.n	8005d38 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	88da      	ldrh	r2, [r3, #6]
 8005d1e:	893b      	ldrh	r3, [r7, #8]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	bf28      	it	cs
 8005d24:	4613      	movcs	r3, r2
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d2a:	893b      	ldrh	r3, [r7, #8]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fa3c 	bl	80061ae <USBD_CtlSendData>
 8005d36:	e009      	b.n	8005d4c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9c6 	bl	80060cc <USBD_CtlError>
 8005d40:	e004      	b.n	8005d4c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fa8d 	bl	8006262 <USBD_CtlSendStatus>
 8005d48:	e000      	b.n	8005d4c <USBD_GetDescriptor+0x2cc>
    return;
 8005d4a:	bf00      	nop
    }
  }
}
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop

08005d54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	889b      	ldrh	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d130      	bne.n	8005dc8 <USBD_SetAddress+0x74>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	88db      	ldrh	r3, [r3, #6]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d12c      	bne.n	8005dc8 <USBD_SetAddress+0x74>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	2b7f      	cmp	r3, #127	; 0x7f
 8005d74:	d828      	bhi.n	8005dc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	885b      	ldrh	r3, [r3, #2]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d104      	bne.n	8005d96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f99c 	bl	80060cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d94:	e01c      	b.n	8005dd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 ff18 	bl	8006bd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fa5a 	bl	8006262 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbc:	e008      	b.n	8005dd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc6:	e003      	b.n	8005dd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f97e 	bl	80060cc <USBD_CtlError>
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	885b      	ldrh	r3, [r3, #2]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	4b4b      	ldr	r3, [pc, #300]	; (8005f1c <USBD_SetConfig+0x144>)
 8005dee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005df0:	4b4a      	ldr	r3, [pc, #296]	; (8005f1c <USBD_SetConfig+0x144>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d905      	bls.n	8005e04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f966 	bl	80060cc <USBD_CtlError>
    return USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e087      	b.n	8005f14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d002      	beq.n	8005e14 <USBD_SetConfig+0x3c>
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d025      	beq.n	8005e5e <USBD_SetConfig+0x86>
 8005e12:	e071      	b.n	8005ef8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005e14:	4b41      	ldr	r3, [pc, #260]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01c      	beq.n	8005e56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005e1c:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e26:	4b3d      	ldr	r3, [pc, #244]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff f9a7 	bl	8005180 <USBD_SetClassConfig>
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f944 	bl	80060cc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005e44:	e065      	b.n	8005f12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fa0b 	bl	8006262 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005e54:	e05d      	b.n	8005f12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa03 	bl	8006262 <USBD_CtlSendStatus>
    break;
 8005e5c:	e059      	b.n	8005f12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d112      	bne.n	8005e8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005e6e:	4b2b      	ldr	r3, [pc, #172]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005e78:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff f99a 	bl	80051b8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f9ec 	bl	8006262 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005e8a:	e042      	b.n	8005f12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005e8c:	4b23      	ldr	r3, [pc, #140]	; (8005f1c <USBD_SetConfig+0x144>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d02a      	beq.n	8005ef0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff f988 	bl	80051b8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005ea8:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <USBD_SetConfig+0x144>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005eb2:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <USBD_SetConfig+0x144>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff f961 	bl	8005180 <USBD_SetClassConfig>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00f      	beq.n	8005ee8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8fe 	bl	80060cc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff f96d 	bl	80051b8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005ee6:	e014      	b.n	8005f12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f9ba 	bl	8006262 <USBD_CtlSendStatus>
    break;
 8005eee:	e010      	b.n	8005f12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9b6 	bl	8006262 <USBD_CtlSendStatus>
    break;
 8005ef6:	e00c      	b.n	8005f12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8e6 	bl	80060cc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <USBD_SetConfig+0x144>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff f956 	bl	80051b8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f10:	bf00      	nop
  }

  return ret;
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	20000204 	.word	0x20000204

08005f20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	88db      	ldrh	r3, [r3, #6]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d004      	beq.n	8005f3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8c9 	bl	80060cc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005f3a:	e021      	b.n	8005f80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	db17      	blt.n	8005f76 <USBD_GetConfig+0x56>
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	dd02      	ble.n	8005f50 <USBD_GetConfig+0x30>
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d00b      	beq.n	8005f66 <USBD_GetConfig+0x46>
 8005f4e:	e012      	b.n	8005f76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f925 	bl	80061ae <USBD_CtlSendData>
      break;
 8005f64:	e00c      	b.n	8005f80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f91d 	bl	80061ae <USBD_CtlSendData>
      break;
 8005f74:	e004      	b.n	8005f80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f8a7 	bl	80060cc <USBD_CtlError>
      break;
 8005f7e:	bf00      	nop
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d81e      	bhi.n	8005fdc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	88db      	ldrh	r3, [r3, #6]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d004      	beq.n	8005fb0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f88f 	bl	80060cc <USBD_CtlError>
      break;
 8005fae:	e01a      	b.n	8005fe6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f043 0202 	orr.w	r2, r3, #2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f8ea 	bl	80061ae <USBD_CtlSendData>
    break;
 8005fda:	e004      	b.n	8005fe6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f874 	bl	80060cc <USBD_CtlError>
    break;
 8005fe4:	bf00      	nop
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	885b      	ldrh	r3, [r3, #2]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f92a 	bl	8006262 <USBD_CtlSendStatus>
  }
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006026:	3b01      	subs	r3, #1
 8006028:	2b02      	cmp	r3, #2
 800602a:	d80b      	bhi.n	8006044 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	885b      	ldrh	r3, [r3, #2]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10c      	bne.n	800604e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f910 	bl	8006262 <USBD_CtlSendStatus>
      }
      break;
 8006042:	e004      	b.n	800604e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f840 	bl	80060cc <USBD_CtlError>
      break;
 800604c:	e000      	b.n	8006050 <USBD_ClrFeature+0x3a>
      break;
 800604e:	bf00      	nop
  }
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	781a      	ldrb	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fad3 	bl	800562e <SWAPBYTE>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3301      	adds	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fac6 	bl	800562e <SWAPBYTE>
 80060a2:	4603      	mov	r3, r0
 80060a4:	461a      	mov	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fab9 	bl	800562e <SWAPBYTE>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	80da      	strh	r2, [r3, #6]
}
 80060c4:	bf00      	nop
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fd13 	bl	8006b04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80060de:	2100      	movs	r1, #0
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fd0f 	bl	8006b04 <USBD_LL_StallEP>
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d036      	beq.n	8006172 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006108:	6938      	ldr	r0, [r7, #16]
 800610a:	f000 f836 	bl	800617a <USBD_GetLen>
 800610e:	4603      	mov	r3, r0
 8006110:	3301      	adds	r3, #1
 8006112:	b29b      	uxth	r3, r3
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	4413      	add	r3, r2
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
  idx++;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	3301      	adds	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	4413      	add	r3, r2
 8006134:	2203      	movs	r2, #3
 8006136:	701a      	strb	r2, [r3, #0]
  idx++;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	3301      	adds	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800613e:	e013      	b.n	8006168 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	4413      	add	r3, r2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	7812      	ldrb	r2, [r2, #0]
 800614a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	3301      	adds	r3, #1
 8006150:	613b      	str	r3, [r7, #16]
    idx++;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	3301      	adds	r3, #1
 8006156:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
    idx++;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	3301      	adds	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e7      	bne.n	8006140 <USBD_GetString+0x52>
 8006170:	e000      	b.n	8006174 <USBD_GetString+0x86>
    return;
 8006172:	bf00      	nop
  }
}
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800618a:	e005      	b.n	8006198 <USBD_GetLen+0x1e>
  {
    len++;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	3301      	adds	r3, #1
 8006190:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3301      	adds	r3, #1
 8006196:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f5      	bne.n	800618c <USBD_GetLen+0x12>
  }

  return len;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2202      	movs	r2, #2
 80061be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	2100      	movs	r1, #0
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fd1e 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	2100      	movs	r1, #0
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fd0d 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2203      	movs	r2, #3
 8006216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	2100      	movs	r1, #0
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fd11 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	2100      	movs	r1, #0
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fd00 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006272:	2300      	movs	r3, #0
 8006274:	2200      	movs	r2, #0
 8006276:	2100      	movs	r1, #0
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fccc 	bl	8006c16 <USBD_LL_Transmit>

  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2205      	movs	r2, #5
 8006294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006298:	2300      	movs	r3, #0
 800629a:	2200      	movs	r2, #0
 800629c:	2100      	movs	r1, #0
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fcda 	bl	8006c58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80062b4:	2200      	movs	r2, #0
 80062b6:	4912      	ldr	r1, [pc, #72]	; (8006300 <MX_USB_DEVICE_Init+0x50>)
 80062b8:	4812      	ldr	r0, [pc, #72]	; (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062ba:	f7fe fef3 	bl	80050a4 <USBD_Init>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80062c4:	f7fa fa72 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80062c8:	490f      	ldr	r1, [pc, #60]	; (8006308 <MX_USB_DEVICE_Init+0x58>)
 80062ca:	480e      	ldr	r0, [pc, #56]	; (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062cc:	f7fe ff20 	bl	8005110 <USBD_RegisterClass>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80062d6:	f7fa fa69 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80062da:	490c      	ldr	r1, [pc, #48]	; (800630c <MX_USB_DEVICE_Init+0x5c>)
 80062dc:	4809      	ldr	r0, [pc, #36]	; (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062de:	f7fe fe45 	bl	8004f6c <USBD_CDC_RegisterInterface>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80062e8:	f7fa fa60 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80062ec:	4805      	ldr	r0, [pc, #20]	; (8006304 <MX_USB_DEVICE_Init+0x54>)
 80062ee:	f7fe ff30 	bl	8005152 <USBD_Start>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80062f8:	f7fa fa58 	bl	80007ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80062fc:	bf00      	nop
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000130 	.word	0x20000130
 8006304:	2000035c 	.word	0x2000035c
 8006308:	20000018 	.word	0x20000018
 800630c:	2000011c 	.word	0x2000011c

08006310 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */

	s_RxBuffers.IsCommandDataReceived = 0;
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <CDC_Init_FS+0x18>)
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]

  /* Set Application Buffers */
	//USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS);
 800631a:	4904      	ldr	r1, [pc, #16]	; (800632c <CDC_Init_FS+0x1c>)
 800631c:	4804      	ldr	r0, [pc, #16]	; (8006330 <CDC_Init_FS+0x20>)
 800631e:	f7fe fe53 	bl	8004fc8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006322:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006324:	4618      	mov	r0, r3
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000208 	.word	0x20000208
 800632c:	2000020c 	.word	0x2000020c
 8006330:	2000035c 	.word	0x2000035c

08006334 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006338:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800633a:	4618      	mov	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	6039      	str	r1, [r7, #0]
 800634e:	71fb      	strb	r3, [r7, #7]
 8006350:	4613      	mov	r3, r2
 8006352:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	2b23      	cmp	r3, #35	; 0x23
 8006358:	d84a      	bhi.n	80063f0 <CDC_Control_FS+0xac>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <CDC_Control_FS+0x1c>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	080063f1 	.word	0x080063f1
 8006364:	080063f1 	.word	0x080063f1
 8006368:	080063f1 	.word	0x080063f1
 800636c:	080063f1 	.word	0x080063f1
 8006370:	080063f1 	.word	0x080063f1
 8006374:	080063f1 	.word	0x080063f1
 8006378:	080063f1 	.word	0x080063f1
 800637c:	080063f1 	.word	0x080063f1
 8006380:	080063f1 	.word	0x080063f1
 8006384:	080063f1 	.word	0x080063f1
 8006388:	080063f1 	.word	0x080063f1
 800638c:	080063f1 	.word	0x080063f1
 8006390:	080063f1 	.word	0x080063f1
 8006394:	080063f1 	.word	0x080063f1
 8006398:	080063f1 	.word	0x080063f1
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	080063f1 	.word	0x080063f1
 80063a4:	080063f1 	.word	0x080063f1
 80063a8:	080063f1 	.word	0x080063f1
 80063ac:	080063f1 	.word	0x080063f1
 80063b0:	080063f1 	.word	0x080063f1
 80063b4:	080063f1 	.word	0x080063f1
 80063b8:	080063f1 	.word	0x080063f1
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	080063f1 	.word	0x080063f1
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f1 	.word	0x080063f1
 80063d4:	080063f1 	.word	0x080063f1
 80063d8:	080063f1 	.word	0x080063f1
 80063dc:	080063f1 	.word	0x080063f1
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	080063f1 	.word	0x080063f1
 80063e8:	080063f1 	.word	0x080063f1
 80063ec:	080063f1 	.word	0x080063f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80063f0:	bf00      	nop
  }

  return (USBD_OK);
 80063f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	s_RxBuffers.IsCommandDataReceived=1;					//indicates data were received
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <CDC_Receive_FS+0x34>)
 800640c:	2201      	movs	r2, #1
 800640e:	701a      	strb	r2, [r3, #0]
	s_RxBuffers.UserBufferRxLength=*Len;					//only set the length, data was directly saved to buffer
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a07      	ldr	r2, [pc, #28]	; (8006434 <CDC_Receive_FS+0x34>)
 8006416:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS); //prepare to receive the next data
 800641a:	4907      	ldr	r1, [pc, #28]	; (8006438 <CDC_Receive_FS+0x38>)
 800641c:	4807      	ldr	r0, [pc, #28]	; (800643c <CDC_Receive_FS+0x3c>)
 800641e:	f7fe fdd3 	bl	8004fc8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006422:	4806      	ldr	r0, [pc, #24]	; (800643c <CDC_Receive_FS+0x3c>)
 8006424:	f7fe fe14 	bl	8005050 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8006428:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000208 	.word	0x20000208
 8006438:	2000020c 	.word	0x2000020c
 800643c:	2000035c 	.word	0x2000035c

08006440 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006450:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <CDC_Transmit_FS+0x48>)
 8006452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006456:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006462:	2301      	movs	r3, #1
 8006464:	e00b      	b.n	800647e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	461a      	mov	r2, r3
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4806      	ldr	r0, [pc, #24]	; (8006488 <CDC_Transmit_FS+0x48>)
 800646e:	f7fe fd92 	bl	8004f96 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006472:	4805      	ldr	r0, [pc, #20]	; (8006488 <CDC_Transmit_FS+0x48>)
 8006474:	f7fe fdbc 	bl	8004ff0 <USBD_CDC_TransmitPacket>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	2000035c 	.word	0x2000035c

0800648c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800649e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <VCP_retrieveUSBData>:
* @param Buf: Buffer of data to be received
* @param Len: Number of data received (in bytes)
* @retv
*/
uint8_t VCP_retrieveUSBData(uint8_t* Buf, uint32_t *Len)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
	if (s_RxBuffers.IsCommandDataReceived==0)
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <VCP_retrieveUSBData+0x4c>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <VCP_retrieveUSBData+0x16>
		return 0; //no data received
 80064c2:	2300      	movs	r3, #0
 80064c4:	e015      	b.n	80064f2 <VCP_retrieveUSBData+0x42>

	*Len=s_RxBuffers.UserBufferRxLength; //return the length
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <VCP_retrieveUSBData+0x4c>)
 80064c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	601a      	str	r2, [r3, #0]
	memcpy(Buf,s_RxBuffers.UserRxBufferFS,*Len);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	490a      	ldr	r1, [pc, #40]	; (8006500 <VCP_retrieveUSBData+0x50>)
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fc57 	bl	8006d8c <memcpy>
	Buf[*Len]='\0'; //testing only. make sure there is ending char in the returned command string
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]

	s_RxBuffers.IsCommandDataReceived=0;
 80064ea:	4b04      	ldr	r3, [pc, #16]	; (80064fc <VCP_retrieveUSBData+0x4c>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]

	return 1;
 80064f0:	2301      	movs	r3, #1
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000208 	.word	0x20000208
 8006500:	2000020c 	.word	0x2000020c

08006504 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	6039      	str	r1, [r7, #0]
 800650e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2212      	movs	r2, #18
 8006514:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	2000014c 	.word	0x2000014c

08006528 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2204      	movs	r2, #4
 8006538:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800653a:	4b03      	ldr	r3, [pc, #12]	; (8006548 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	20000160 	.word	0x20000160

0800654c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	6039      	str	r1, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d105      	bne.n	800656a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	4907      	ldr	r1, [pc, #28]	; (8006580 <USBD_FS_ProductStrDescriptor+0x34>)
 8006562:	4808      	ldr	r0, [pc, #32]	; (8006584 <USBD_FS_ProductStrDescriptor+0x38>)
 8006564:	f7ff fdc3 	bl	80060ee <USBD_GetString>
 8006568:	e004      	b.n	8006574 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4904      	ldr	r1, [pc, #16]	; (8006580 <USBD_FS_ProductStrDescriptor+0x34>)
 800656e:	4805      	ldr	r0, [pc, #20]	; (8006584 <USBD_FS_ProductStrDescriptor+0x38>)
 8006570:	f7ff fdbd 	bl	80060ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8006574:	4b02      	ldr	r3, [pc, #8]	; (8006580 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	2000062c 	.word	0x2000062c
 8006584:	08006f50 	.word	0x08006f50

08006588 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	6039      	str	r1, [r7, #0]
 8006592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	4904      	ldr	r1, [pc, #16]	; (80065a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006598:	4804      	ldr	r0, [pc, #16]	; (80065ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800659a:	f7ff fda8 	bl	80060ee <USBD_GetString>
  return USBD_StrDesc;
 800659e:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	2000062c 	.word	0x2000062c
 80065ac:	08006f68 	.word	0x08006f68

080065b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	221a      	movs	r2, #26
 80065c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80065c2:	f000 f843 	bl	800664c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065c6:	4b02      	ldr	r3, [pc, #8]	; (80065d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000164 	.word	0x20000164

080065d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4603      	mov	r3, r0
 80065dc:	6039      	str	r1, [r7, #0]
 80065de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	4907      	ldr	r1, [pc, #28]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065ea:	4808      	ldr	r0, [pc, #32]	; (800660c <USBD_FS_ConfigStrDescriptor+0x38>)
 80065ec:	f7ff fd7f 	bl	80060ee <USBD_GetString>
 80065f0:	e004      	b.n	80065fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	4904      	ldr	r1, [pc, #16]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065f6:	4805      	ldr	r0, [pc, #20]	; (800660c <USBD_FS_ConfigStrDescriptor+0x38>)
 80065f8:	f7ff fd79 	bl	80060ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80065fc:	4b02      	ldr	r3, [pc, #8]	; (8006608 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2000062c 	.word	0x2000062c
 800660c:	08006f7c 	.word	0x08006f7c

08006610 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	6039      	str	r1, [r7, #0]
 800661a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4907      	ldr	r1, [pc, #28]	; (8006644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006626:	4808      	ldr	r0, [pc, #32]	; (8006648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006628:	f7ff fd61 	bl	80060ee <USBD_GetString>
 800662c:	e004      	b.n	8006638 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4904      	ldr	r1, [pc, #16]	; (8006644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006632:	4805      	ldr	r0, [pc, #20]	; (8006648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006634:	f7ff fd5b 	bl	80060ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8006638:	4b02      	ldr	r3, [pc, #8]	; (8006644 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	2000062c 	.word	0x2000062c
 8006648:	08006f88 	.word	0x08006f88

0800664c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <Get_SerialNum+0x44>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <Get_SerialNum+0x48>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800665e:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <Get_SerialNum+0x4c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006672:	2208      	movs	r2, #8
 8006674:	4909      	ldr	r1, [pc, #36]	; (800669c <Get_SerialNum+0x50>)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f814 	bl	80066a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800667c:	2204      	movs	r2, #4
 800667e:	4908      	ldr	r1, [pc, #32]	; (80066a0 <Get_SerialNum+0x54>)
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f000 f80f 	bl	80066a4 <IntToUnicode>
  }
}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	1fff7a10 	.word	0x1fff7a10
 8006694:	1fff7a14 	.word	0x1fff7a14
 8006698:	1fff7a18 	.word	0x1fff7a18
 800669c:	20000166 	.word	0x20000166
 80066a0:	20000176 	.word	0x20000176

080066a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
 80066ba:	e027      	b.n	800670c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0f1b      	lsrs	r3, r3, #28
 80066c0:	2b09      	cmp	r3, #9
 80066c2:	d80b      	bhi.n	80066dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	0f1b      	lsrs	r3, r3, #28
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	4619      	mov	r1, r3
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	440b      	add	r3, r1
 80066d4:	3230      	adds	r2, #48	; 0x30
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e00a      	b.n	80066f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	0f1b      	lsrs	r3, r3, #28
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4619      	mov	r1, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	440b      	add	r3, r1
 80066ec:	3237      	adds	r2, #55	; 0x37
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	3301      	adds	r3, #1
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4413      	add	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	3301      	adds	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
 800670c:	7dfa      	ldrb	r2, [r7, #23]
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	429a      	cmp	r2, r3
 8006712:	d3d3      	bcc.n	80066bc <IntToUnicode+0x18>
  }
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08a      	sub	sp, #40	; 0x28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006728:	f107 0314 	add.w	r3, r7, #20
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	605a      	str	r2, [r3, #4]
 8006732:	609a      	str	r2, [r3, #8]
 8006734:	60da      	str	r2, [r3, #12]
 8006736:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006740:	d13a      	bne.n	80067b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006742:	2300      	movs	r3, #0
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 800674c:	f043 0301 	orr.w	r3, r3, #1
 8006750:	6313      	str	r3, [r2, #48]	; 0x30
 8006752:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800675e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800676c:	2303      	movs	r3, #3
 800676e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006770:	230a      	movs	r3, #10
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	4619      	mov	r1, r3
 800677a:	4812      	ldr	r0, [pc, #72]	; (80067c4 <HAL_PCD_MspInit+0xa4>)
 800677c:	f7fa fb00 	bl	8000d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006780:	4b0f      	ldr	r3, [pc, #60]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	4a0e      	ldr	r2, [pc, #56]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678a:	6353      	str	r3, [r2, #52]	; 0x34
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006794:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 8006796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800679a:	6453      	str	r3, [r2, #68]	; 0x44
 800679c:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <HAL_PCD_MspInit+0xa0>)
 800679e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	2043      	movs	r0, #67	; 0x43
 80067ae:	f7fa fab0 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80067b2:	2043      	movs	r0, #67	; 0x43
 80067b4:	f7fa fac9 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80067b8:	bf00      	nop
 80067ba:	3728      	adds	r7, #40	; 0x28
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40020000 	.word	0x40020000

080067c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7fe fd02 	bl	80051e8 <USBD_LL_SetupStage>
}
 80067e4:	bf00      	nop
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80067fe:	78fa      	ldrb	r2, [r7, #3]
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	4619      	mov	r1, r3
 8006816:	f7fe fd3a 	bl	800528e <USBD_LL_DataOutStage>
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	3348      	adds	r3, #72	; 0x48
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	4619      	mov	r1, r3
 800684a:	f7fe fd83 	bl	8005354 <USBD_LL_DataInStage>
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fe87 	bl	8005578 <USBD_LL_SOF>
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
 800688a:	e008      	b.n	800689e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d102      	bne.n	800689a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e001      	b.n	800689e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800689a:	f7f9 ff87 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fe2a 	bl	8005502 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe fde3 	bl	8005480 <USBD_LL_Reset>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fe25 	bl	8005522 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d005      	beq.n	8006904 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <HAL_PCD_SuspendCallback+0x48>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	4a03      	ldr	r2, [pc, #12]	; (800690c <HAL_PCD_SuspendCallback+0x48>)
 80068fe:	f043 0306 	orr.w	r3, r3, #6
 8006902:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	e000ed00 	.word	0xe000ed00

08006910 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fe14 	bl	800554c <USBD_LL_Resume>
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fe3f 	bl	80055c6 <USBD_LL_IsoOUTIncomplete>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	4611      	mov	r1, r2
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fe20 	bl	80055ac <USBD_LL_IsoINIncomplete>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe fe2c 	bl	80055e0 <USBD_LL_DevConnected>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe fe29 	bl	80055f6 <USBD_LL_DevDisconnected>
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d13c      	bne.n	8006a36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <USBD_LL_Init+0x94>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1e      	ldr	r2, [pc, #120]	; (8006a40 <USBD_LL_Init+0x94>)
 80069c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069cc:	4b1c      	ldr	r3, [pc, #112]	; (8006a40 <USBD_LL_Init+0x94>)
 80069ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <USBD_LL_Init+0x94>)
 80069d6:	2204      	movs	r2, #4
 80069d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069da:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <USBD_LL_Init+0x94>)
 80069dc:	2202      	movs	r2, #2
 80069de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069e0:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <USBD_LL_Init+0x94>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069e6:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <USBD_LL_Init+0x94>)
 80069e8:	2202      	movs	r2, #2
 80069ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <USBD_LL_Init+0x94>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069f2:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <USBD_LL_Init+0x94>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069f8:	4b11      	ldr	r3, [pc, #68]	; (8006a40 <USBD_LL_Init+0x94>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80069fe:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006a0a:	480d      	ldr	r0, [pc, #52]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a0c:	f7fa fb6e 	bl	80010ec <HAL_PCD_Init>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006a16:	f7f9 fec9 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	4808      	ldr	r0, [pc, #32]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a1e:	f7fb fccc 	bl	80023ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a22:	2240      	movs	r2, #64	; 0x40
 8006a24:	2100      	movs	r1, #0
 8006a26:	4806      	ldr	r0, [pc, #24]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a28:	f7fb fc80 	bl	800232c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a2c:	2280      	movs	r2, #128	; 0x80
 8006a2e:	2101      	movs	r1, #1
 8006a30:	4803      	ldr	r0, [pc, #12]	; (8006a40 <USBD_LL_Init+0x94>)
 8006a32:	f7fb fc7b 	bl	800232c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	2000082c 	.word	0x2000082c

08006a44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fa fc63 	bl	8001326 <HAL_PCD_Start>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f92a 	bl	8006cc0 <USBD_Get_USB_Status>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	461a      	mov	r2, r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	70fb      	strb	r3, [r7, #3]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70bb      	strb	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006aa2:	78bb      	ldrb	r3, [r7, #2]
 8006aa4:	883a      	ldrh	r2, [r7, #0]
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	f7fb f847 	bl	8001b3a <HAL_PCD_EP_Open>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 f904 	bl	8006cc0 <USBD_Get_USB_Status>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fb f890 	bl	8001c0a <HAL_PCD_EP_Close>
 8006aea:	4603      	mov	r3, r0
 8006aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f8e5 	bl	8006cc0 <USBD_Get_USB_Status>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b1e:	78fa      	ldrb	r2, [r7, #3]
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fb f968 	bl	8001df8 <HAL_PCD_EP_SetStall>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8c6 	bl	8006cc0 <USBD_Get_USB_Status>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fb f9ad 	bl	8001ec0 <HAL_PCD_EP_ClrStall>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f8a7 	bl	8006cc0 <USBD_Get_USB_Status>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da0b      	bge.n	8006bb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	333e      	adds	r3, #62	; 0x3e
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	e00b      	b.n	8006bcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fa ff7a 	bl	8001af0 <HAL_PCD_SetAddress>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f85c 	bl	8006cc0 <USBD_Get_USB_Status>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	460b      	mov	r3, r1
 8006c24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c34:	7af9      	ldrb	r1, [r7, #11]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	f7fb f893 	bl	8001d64 <HAL_PCD_EP_Transmit>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f83b 	bl	8006cc0 <USBD_Get_USB_Status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	460b      	mov	r3, r1
 8006c66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c76:	7af9      	ldrb	r1, [r7, #11]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f7fb f80f 	bl	8001c9e <HAL_PCD_EP_Receive>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 f81a 	bl	8006cc0 <USBD_Get_USB_Status>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c90:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fb f83f 	bl	8001d34 <HAL_PCD_EP_GetRxCount>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d817      	bhi.n	8006d04 <USBD_Get_USB_Status+0x44>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <USBD_Get_USB_Status+0x1c>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006ced 	.word	0x08006ced
 8006ce0:	08006cf3 	.word	0x08006cf3
 8006ce4:	08006cf9 	.word	0x08006cf9
 8006ce8:	08006cff 	.word	0x08006cff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf0:	e00b      	b.n	8006d0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf6:	e008      	b.n	8006d0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006cfc:	e005      	b.n	8006d0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	73fb      	strb	r3, [r7, #15]
    break;
 8006d02:	e002      	b.n	8006d0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	73fb      	strb	r3, [r7, #15]
    break;
 8006d08:	bf00      	nop
  }
  return usb_status;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000180 	.word	0x20000180

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4e0d      	ldr	r6, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1ba4      	subs	r4, r4, r6
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2500      	movs	r5, #0
 8006d30:	42a5      	cmp	r5, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4e0b      	ldr	r6, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f000 f8f6 	bl	8006f28 <_init>
 8006d3c:	1ba4      	subs	r4, r4, r6
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2500      	movs	r5, #0
 8006d42:	42a5      	cmp	r5, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d4c:	4798      	blx	r3
 8006d4e:	3501      	adds	r5, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d56:	4798      	blx	r3
 8006d58:	3501      	adds	r5, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08006fb8 	.word	0x08006fb8
 8006d60:	08006fb8 	.word	0x08006fb8
 8006d64:	08006fb8 	.word	0x08006fb8
 8006d68:	08006fbc 	.word	0x08006fbc

08006d6c <malloc>:
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <malloc+0xc>)
 8006d6e:	4601      	mov	r1, r0
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	f000 b86d 	b.w	8006e50 <_malloc_r>
 8006d76:	bf00      	nop
 8006d78:	20000180 	.word	0x20000180

08006d7c <free>:
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <free+0xc>)
 8006d7e:	4601      	mov	r1, r0
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	f000 b817 	b.w	8006db4 <_free_r>
 8006d86:	bf00      	nop
 8006d88:	20000180 	.word	0x20000180

08006d8c <memcpy>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	1e43      	subs	r3, r0, #1
 8006d90:	440a      	add	r2, r1
 8006d92:	4291      	cmp	r1, r2
 8006d94:	d100      	bne.n	8006d98 <memcpy+0xc>
 8006d96:	bd10      	pop	{r4, pc}
 8006d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006da0:	e7f7      	b.n	8006d92 <memcpy+0x6>

08006da2 <memset>:
 8006da2:	4402      	add	r2, r0
 8006da4:	4603      	mov	r3, r0
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d100      	bne.n	8006dac <memset+0xa>
 8006daa:	4770      	bx	lr
 8006dac:	f803 1b01 	strb.w	r1, [r3], #1
 8006db0:	e7f9      	b.n	8006da6 <memset+0x4>
	...

08006db4 <_free_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4605      	mov	r5, r0
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d045      	beq.n	8006e48 <_free_r+0x94>
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f0c      	subs	r4, r1, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfb8      	it	lt
 8006dc6:	18e4      	addlt	r4, r4, r3
 8006dc8:	f000 f8ac 	bl	8006f24 <__malloc_lock>
 8006dcc:	4a1f      	ldr	r2, [pc, #124]	; (8006e4c <_free_r+0x98>)
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	b933      	cbnz	r3, 8006de2 <_free_r+0x2e>
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	6014      	str	r4, [r2, #0]
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dde:	f000 b8a2 	b.w	8006f26 <__malloc_unlock>
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	d90c      	bls.n	8006e00 <_free_r+0x4c>
 8006de6:	6821      	ldr	r1, [r4, #0]
 8006de8:	1862      	adds	r2, r4, r1
 8006dea:	4293      	cmp	r3, r2
 8006dec:	bf04      	itt	eq
 8006dee:	681a      	ldreq	r2, [r3, #0]
 8006df0:	685b      	ldreq	r3, [r3, #4]
 8006df2:	6063      	str	r3, [r4, #4]
 8006df4:	bf04      	itt	eq
 8006df6:	1852      	addeq	r2, r2, r1
 8006df8:	6022      	streq	r2, [r4, #0]
 8006dfa:	6004      	str	r4, [r0, #0]
 8006dfc:	e7ec      	b.n	8006dd8 <_free_r+0x24>
 8006dfe:	4613      	mov	r3, r2
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	b10a      	cbz	r2, 8006e08 <_free_r+0x54>
 8006e04:	42a2      	cmp	r2, r4
 8006e06:	d9fa      	bls.n	8006dfe <_free_r+0x4a>
 8006e08:	6819      	ldr	r1, [r3, #0]
 8006e0a:	1858      	adds	r0, r3, r1
 8006e0c:	42a0      	cmp	r0, r4
 8006e0e:	d10b      	bne.n	8006e28 <_free_r+0x74>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	4401      	add	r1, r0
 8006e14:	1858      	adds	r0, r3, r1
 8006e16:	4282      	cmp	r2, r0
 8006e18:	6019      	str	r1, [r3, #0]
 8006e1a:	d1dd      	bne.n	8006dd8 <_free_r+0x24>
 8006e1c:	6810      	ldr	r0, [r2, #0]
 8006e1e:	6852      	ldr	r2, [r2, #4]
 8006e20:	605a      	str	r2, [r3, #4]
 8006e22:	4401      	add	r1, r0
 8006e24:	6019      	str	r1, [r3, #0]
 8006e26:	e7d7      	b.n	8006dd8 <_free_r+0x24>
 8006e28:	d902      	bls.n	8006e30 <_free_r+0x7c>
 8006e2a:	230c      	movs	r3, #12
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	e7d3      	b.n	8006dd8 <_free_r+0x24>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	1821      	adds	r1, r4, r0
 8006e34:	428a      	cmp	r2, r1
 8006e36:	bf04      	itt	eq
 8006e38:	6811      	ldreq	r1, [r2, #0]
 8006e3a:	6852      	ldreq	r2, [r2, #4]
 8006e3c:	6062      	str	r2, [r4, #4]
 8006e3e:	bf04      	itt	eq
 8006e40:	1809      	addeq	r1, r1, r0
 8006e42:	6021      	streq	r1, [r4, #0]
 8006e44:	605c      	str	r4, [r3, #4]
 8006e46:	e7c7      	b.n	8006dd8 <_free_r+0x24>
 8006e48:	bd38      	pop	{r3, r4, r5, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000310 	.word	0x20000310

08006e50 <_malloc_r>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	1ccd      	adds	r5, r1, #3
 8006e54:	f025 0503 	bic.w	r5, r5, #3
 8006e58:	3508      	adds	r5, #8
 8006e5a:	2d0c      	cmp	r5, #12
 8006e5c:	bf38      	it	cc
 8006e5e:	250c      	movcc	r5, #12
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	4606      	mov	r6, r0
 8006e64:	db01      	blt.n	8006e6a <_malloc_r+0x1a>
 8006e66:	42a9      	cmp	r1, r5
 8006e68:	d903      	bls.n	8006e72 <_malloc_r+0x22>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	2000      	movs	r0, #0
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	f000 f857 	bl	8006f24 <__malloc_lock>
 8006e76:	4a21      	ldr	r2, [pc, #132]	; (8006efc <_malloc_r+0xac>)
 8006e78:	6814      	ldr	r4, [r2, #0]
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	b991      	cbnz	r1, 8006ea4 <_malloc_r+0x54>
 8006e7e:	4c20      	ldr	r4, [pc, #128]	; (8006f00 <_malloc_r+0xb0>)
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	b91b      	cbnz	r3, 8006e8c <_malloc_r+0x3c>
 8006e84:	4630      	mov	r0, r6
 8006e86:	f000 f83d 	bl	8006f04 <_sbrk_r>
 8006e8a:	6020      	str	r0, [r4, #0]
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 f838 	bl	8006f04 <_sbrk_r>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d124      	bne.n	8006ee2 <_malloc_r+0x92>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	6033      	str	r3, [r6, #0]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f842 	bl	8006f26 <__malloc_unlock>
 8006ea2:	e7e4      	b.n	8006e6e <_malloc_r+0x1e>
 8006ea4:	680b      	ldr	r3, [r1, #0]
 8006ea6:	1b5b      	subs	r3, r3, r5
 8006ea8:	d418      	bmi.n	8006edc <_malloc_r+0x8c>
 8006eaa:	2b0b      	cmp	r3, #11
 8006eac:	d90f      	bls.n	8006ece <_malloc_r+0x7e>
 8006eae:	600b      	str	r3, [r1, #0]
 8006eb0:	50cd      	str	r5, [r1, r3]
 8006eb2:	18cc      	adds	r4, r1, r3
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f000 f836 	bl	8006f26 <__malloc_unlock>
 8006eba:	f104 000b 	add.w	r0, r4, #11
 8006ebe:	1d23      	adds	r3, r4, #4
 8006ec0:	f020 0007 	bic.w	r0, r0, #7
 8006ec4:	1ac3      	subs	r3, r0, r3
 8006ec6:	d0d3      	beq.n	8006e70 <_malloc_r+0x20>
 8006ec8:	425a      	negs	r2, r3
 8006eca:	50e2      	str	r2, [r4, r3]
 8006ecc:	e7d0      	b.n	8006e70 <_malloc_r+0x20>
 8006ece:	428c      	cmp	r4, r1
 8006ed0:	684b      	ldr	r3, [r1, #4]
 8006ed2:	bf16      	itet	ne
 8006ed4:	6063      	strne	r3, [r4, #4]
 8006ed6:	6013      	streq	r3, [r2, #0]
 8006ed8:	460c      	movne	r4, r1
 8006eda:	e7eb      	b.n	8006eb4 <_malloc_r+0x64>
 8006edc:	460c      	mov	r4, r1
 8006ede:	6849      	ldr	r1, [r1, #4]
 8006ee0:	e7cc      	b.n	8006e7c <_malloc_r+0x2c>
 8006ee2:	1cc4      	adds	r4, r0, #3
 8006ee4:	f024 0403 	bic.w	r4, r4, #3
 8006ee8:	42a0      	cmp	r0, r4
 8006eea:	d005      	beq.n	8006ef8 <_malloc_r+0xa8>
 8006eec:	1a21      	subs	r1, r4, r0
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f000 f808 	bl	8006f04 <_sbrk_r>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d0cf      	beq.n	8006e98 <_malloc_r+0x48>
 8006ef8:	6025      	str	r5, [r4, #0]
 8006efa:	e7db      	b.n	8006eb4 <_malloc_r+0x64>
 8006efc:	20000310 	.word	0x20000310
 8006f00:	20000314 	.word	0x20000314

08006f04 <_sbrk_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4c06      	ldr	r4, [pc, #24]	; (8006f20 <_sbrk_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	f7f9 fcfc 	bl	800090c <_sbrk>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_sbrk_r+0x1a>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_sbrk_r+0x1a>
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20000c34 	.word	0x20000c34

08006f24 <__malloc_lock>:
 8006f24:	4770      	bx	lr

08006f26 <__malloc_unlock>:
 8006f26:	4770      	bx	lr

08006f28 <_init>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr

08006f34 <_fini>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr
